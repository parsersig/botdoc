<?php
// send_stats.php

require_once __DIR__ . '/bootstrap.php';

// Critical checks for $botToken and $db after including bootstrap.php
if (empty($botToken)) { // $botToken comes from bootstrap.php
    // error_log is available via bootstrap's ini_set or bot_log if preferred
    error_log("send_stats.php: CRITICAL - TELEGRAM_BOT_TOKEN is not set. Exiting.");
    exit(1); // Exit for CLI script
}
if ($db === null) { // $db comes from bootstrap.php
    error_log("send_stats.php: CRITICAL - Database connection failed (db is null). Exiting.");
    exit(1);
}
// Ensure $db is actually a valid SQLite3 object, $db->lastErrorCode() === 0 means no error on open
if ($db->lastErrorCode() !== 0 && $db->lastErrorCode() !== SQLITE3_OK) { // SQLITE3_OK is 0
     error_log("send_stats.php: CRITICAL - Database connection error: " . $db->lastErrorMsg() . ". Exiting.");
     exit(1);
}


// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ (stdout, will be captured by cron log)
echo date('Y-m-d H:i:s') . " - –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Telegram
// This function uses global $botToken which is now set in bootstrap.php
function apiRequest($method, $params = []) {
    global $botToken, $apiUrl; // $apiUrl is not globally set in bootstrap, construct it or pass it
                               // For now, using $botToken to construct $apiUrl locally.
                               // Or, ensure $apiUrl is also global in bootstrap.php if used by many functions.
    $currentApiUrl = "https://api.telegram.org/bot$botToken"; // Constructing locally

    $url = "$currentApiUrl/$method";
    $curl = curl_init();
    curl_setopt_array($curl, [
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => json_encode($params), // Send as JSON
        CURLOPT_HTTPHEADER => ["Content-Type: application/json"], // Set content type to JSON
    ]);
    $response = curl_exec($curl);
    $error = curl_error($curl);
    $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    curl_close($curl);
    
    if ($error) {
        error_log(date('Y-m-d H:i:s') . " - API Request ERROR ($method): $error. HTTP Code: $httpCode\n");
        return false;
    }
    $decodedResponse = json_decode($response, true);
    if ($httpCode !== 200 || !isset($decodedResponse['ok']) || $decodedResponse['ok'] !== true) {
        error_log(date('Y-m-d H:i:s') . " - API Request Failed ($method): HTTP $httpCode - Response: $response\n");
        return $decodedResponse; // Return response even on failure for potential debugging
    }
    return $decodedResponse;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
// This function uses apiRequest, which relies on global $botToken from bootstrap.php
function sendMessage($chatId, $text, $replyMarkup = null, $message_thread_id = null) {
    $params = [
        'chat_id' => $chatId,
        'text' => $text,
        'parse_mode' => 'HTML',
        'disable_web_page_preview' => true
    ];
    
    if ($message_thread_id !== null) {
        $params['message_thread_id'] = $message_thread_id;
    }
    
    if ($replyMarkup !== null) {
        // Ensure reply_markup is a JSON string if it's an array, as apiRequest now handles json_encode for top-level params
        if (is_array($replyMarkup)) {
            $params['reply_markup'] = json_encode($replyMarkup, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
        } else {
            $params['reply_markup'] = $replyMarkup; // Assume it's already a JSON string if not an array
        }
    }
    
    return apiRequest('sendMessage', $params);
}

/**
 * Retrieves and formats bot statistics.
 *
 * @global SQLite3 $db The database connection object (from bootstrap.php).
 * @return string The formatted statistics message.
 */
function getBotStats() {
    global $db; // $db comes from bootstrap.php
    
    $stats = ['total' => 0, 'active' => 0, 'balance' => 0, 'referrals' => 0];
    $query = "SELECT COUNT(*) as total, 
                     SUM(CASE WHEN blocked = 0 THEN 1 ELSE 0 END) as active,
                     SUM(balance) as balance,
                     SUM(referrals) as referrals
              FROM users";
    $result = $db->query($query);
    if ($result && $row = $result->fetchArray(SQLITE3_ASSOC)) {
        $stats = $row;
    } else if (!$result) {
        error_log(date('Y-m-d H:i:s') . " - DB ERROR (getBotStats - users): " . $db->lastErrorMsg());
    }
    
    $topUsers = [];
    $topResult = $db->query("SELECT user_id, username, balance, referrals, blocked 
                           FROM users 
                           ORDER BY balance DESC, referrals DESC 
                           LIMIT 5");
    if ($topResult) {
        while ($user = $topResult->fetchArray(SQLITE3_ASSOC)) {
            $topUsers[] = $user;
        }
    } else {
         error_log(date('Y-m-d H:i:s') . " - DB ERROR (getBotStats - top users): " . $db->lastErrorMsg());
    }
    
    $message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n";
    $message .= "üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>" . ($stats['total'] ?? 0) . "</b>\n";
    $message .= "üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>" . ($stats['active'] ?? 0) . "</b>\n";
    $message .= "üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>" . ($stats['balance'] ?? 0) . "</b> –±–∞–ª–ª–æ–≤\n";
    $message .= "üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>" . ($stats['referrals'] ?? 0) . "</b>\n\n";
    
    $message .= "üèÜ <b>–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>:\n";
    if (empty($topUsers)) {
        $message .= "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–æ–ø–µ.\n";
    } else {
        foreach ($topUsers as $i => $user) {
            $status = $user['blocked'] ? 'üö´' : '‚úÖ';
            $usernameDisplay = $user['username'] ? htmlspecialchars("@".$user['username']) : "ID {$user['user_id']}";
            $message .= ($i+1) . ". $usernameDisplay: <b>{$user['balance']}</b> –±–∞–ª–ª–æ–≤ (–†–µ—Ñ: {$user['referrals']}) $status\n";
        }
    }
    $message .= "\n‚è±Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: " . date('d.m.Y H:i:s');
    
    return $message;
}

// Note: The stat_channels table is created in bootstrap.php if it doesn't exist.

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
$channelsQuery = $db->query("SELECT channel_id FROM stat_channels");
$channels = [];
if ($channelsQuery) {
    while ($row = $channelsQuery->fetchArray(SQLITE3_ASSOC)) {
        $channels[] = $row['channel_id'];
    }
} else {
    error_log(date('Y-m-d H:i:s') . " - DB ERROR (send_stats - fetch stat_channels): " . $db->lastErrorMsg());
}

// –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
if (empty($channels)) {
    global $adminId; // $adminId comes from bootstrap.php
    if (!empty($adminId)) {
        $channels = [$adminId]; // Put adminId in array to use the same loop
        echo date('Y-m-d H:i:s') . " - –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ stat_channels, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É: $adminId\n";
    } else {
        error_log(date('Y-m-d H:i:s') . " - –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ stat_channels –∏ –Ω–µ –∑–∞–¥–∞–Ω ADMIN_ID. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n");
    }
}

// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
$statsMessage = getBotStats();
$sentCount = 0;

if (!empty($channels) && !empty(trim($statsMessage))) {
    foreach ($channels as $channelTargetId) {
        if (empty(trim($channelTargetId))) {
            error_log(date('Y-m-d H:i:s') . " - –ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π channel_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
            continue;
        }
        $result = sendMessage($channelTargetId, $statsMessage);
        if ($result && isset($result['ok']) && $result['ok']) {
            echo date('Y-m-d H:i:s') . " - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç $channelTargetId\n";
            $sentCount++;
        } else {
            $errorResponse = $result ? json_encode($result) : "No response or cURL error";
            error_log(date('Y-m-d H:i:s') . " - –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç $channelTargetId. Response: $errorResponse\n");
        }
        usleep(300000); // 0.3 —Å–µ–∫—É–Ω–¥—ã
    }
} else if (empty($channels)) {
    echo date('Y-m-d H:i:s') . " - –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É—Å—Ç (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ADMIN_ID), –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞—Å—å.\n";
} else if (empty(trim($statsMessage))) {
    error_log(date('Y-m-d H:i:s') . " - –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É—Å—Ç–æ–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞—Å—å.\n");
}


// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î (–≤ bootstrap.php $db –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Ç.–∫. index.php –º–æ–∂–µ—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
// CLI —Å–∫—Ä–∏–ø—Ç—ã –¥–æ–ª–∂–Ω—ã –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ–≥–æ –æ—Ç–∫—Ä—ã–ª–∏ –∏–ª–∏ –µ—Å–ª–∏ bootstrap –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏ –¥–ª—è CLI.
// –ü–æ—Å–∫–æ–ª—å–∫—É bootstrap.php —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç $db, –∏ send_stats.php —è–≤–ª—è–µ—Ç—Å—è CLI,
// –æ–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –ë–î.
// –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ bootstrap.php –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ index.php, $db –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è index.php.
// –†–µ—à–µ–Ω–∏–µ: CLI —Å–∫—Ä–∏–ø—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–∞–º–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å $db. –ù–æ $db –≤ bootstrap.php - —ç—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è.
// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –Ω–µ –±—É–¥–µ–º –∑–∞–∫—Ä—ã–≤–∞—Ç—å $db –∑–¥–µ—Å—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∏ PHP –æ—á–∏—Å—Ç–∏—Ç —Ä–µ—Å—É—Ä—Å—ã.
// –õ–∏–±–æ, bootstrap.php –º–æ–∂–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å shutdown function –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è $db.
// if (isset($db)) { $db->close(); } // Consider implications for index.php if bootstrap is shared.

echo date('Y-m-d H:i:s') . " - –°–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ $sentCount –º–µ—Å—Ç.\n";
?>
