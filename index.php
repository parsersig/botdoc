<?php
// =============================================
// üöÄ Telegram Bot Webhook Handler for Render.com
// =============================================
// -----------------------------
// üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
// -----------------------------
if ($_SERVER['REQUEST_METHOD'] !== 'POST' || empty(file_get_contents("php://input"))) {
    http_response_code(200);
    echo "This is a Telegram webhook endpoint.";
    exit;
}

error_reporting(E_ALL);
ini_set('display_errors', 0);
ini_set('log_errors', 1);
ini_set('error_log', '/tmp/error.log');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
define('DB_FILE', '/tmp/bot_database.db');
define('CHANNEL_ID', -1002543728373); // ID –∫–∞–Ω–∞–ª–∞
define('WEBHOOK_URL', 'https://' . ($_SERVER['HTTP_HOST'] ?? 'localhost'));
define('MIN_WITHDRAW', 100); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
$botToken = getenv('TELEGRAM_BOT_TOKEN') ?: '';
$adminId = getenv('ADMIN_ID') ?: '';
$botUsername = getenv('BOT_USERNAME') ?: 'CRYPTOCAP_ROBOT';

foreach (['TELEGRAM_BOT_TOKEN'=>$botToken, 'ADMIN_ID'=>$adminId, 'BOT_USERNAME'=>$botUsername] as $key=>$value) {
    if (empty($value)) {
        logMessage("Critical: Missing or empty $key environment variable");
        http_response_code(500);
        die("Configuration error");
    }
}

$apiUrl = "https://api.telegram.org/bot $botToken/";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
try {
    $db = new SQLite3(DB_FILE);
    $db->exec("CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        balance INTEGER DEFAULT 0,
        referrals INTEGER DEFAULT 0,
        ref_code TEXT,
        referred_by INTEGER,
        subscribed BOOLEAN DEFAULT 0,
        blocked BOOLEAN DEFAULT 0,
        last_earn INTEGER DEFAULT 0,
        joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )");
} catch (Exception $e) {
    logMessage("Database error: " . $e->getMessage());
    http_response_code(500);
    die("Database error");
}

// -----------------------------
// üõ†Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// -----------------------------
function logMessage($message) {
    $timestamp = date('Y-m-d H:i:s');
    file_put_contents('/tmp/request.log', "[$timestamp] $message\n", FILE_APPEND);
}

function apiRequest($method, $params = [], $retries = 3) {
    global $apiUrl;
    
    $ch = curl_init();
    curl_setopt_array($ch, [
        CURLOPT_URL => $apiUrl.$method,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => $params,
        CURLOPT_TIMEOUT => 10,
        CURLOPT_HTTPHEADER => ['Content-Type: multipart/form-data'],
        CURLOPT_FOLLOWLOCATION => true
    ]);
    
    for ($i=0; $i<$retries; $i++) {
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        
        if ($httpCode != 200) {
            if ($i < $retries - 1) {
                sleep(2);
                continue;
            }
            logMessage("API Error: HTTP $httpCode - ".curl_error($ch));
            curl_close($ch);
            return false;
        }
        
        $result = json_decode($response, true);
        curl_close($ch);
        return $result;
    }
    
    curl_close($ch);
    return false;
}

function sendMessage($chatId, $text, $keyboard = null) {
    $params = [
        'chat_id' => $chatId,
        'text' => $text,
        'parse_mode' => 'HTML',
        'disable_web_page_preview' => true
    ];
    
    if ($keyboard) {
        $params['reply_markup'] = json_encode($keyboard);
    }
    
    return apiRequest('sendMessage', $params);
}

function editMessage($chatId, $msgId, $text, $keyboard = null) {
    $params = [
        'chat_id' => $chatId,
        'message_id' => $msgId,
        'text' => $text,
        'parse_mode' => 'HTML'
    ];
    
    if ($keyboard) {
        $params['reply_markup'] = json_encode($keyboard);
    }
    
    return apiRequest('editMessageText', $params);
}

function isSubscribed($userId) {
    global $botToken;
    $response = file_get_contents("https://api.telegram.org/bot $botToken/getChatMember?chat_id=" . CHANNEL_ID . "&user_id=$userId");
    $data = json_decode($response, true);
    return in_array($data['result']['status'] ?? '', ['member', 'administrator', 'creator']);
}

// -----------------------------
// ‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
// -----------------------------
function getSubscriptionKeyboard() {
    global $adminId;
    return [
        'inline_keyboard' => [[
            ['text' => 'üì¢ –ù–∞—à –∫–∞–Ω–∞–ª', 'url' => 'https://t.me/c/ ' . ltrim(CHANNEL_ID, '-')],
            ['text' => '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'callback_data' => 'check_subscription']
        ]]
    ];
}

function getMainKeyboard($isAdmin = false) {
    $keyboard = [
        ['üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', 'üí≥ –ë–∞–ª–∞–Ω—Å'],
        ['üèÜ –¢–æ–ø', 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã'],
        ['üèß –í—ã–≤–æ–¥', '‚ùì –ü–æ–º–æ—â—å']
    ];
    
    if ($isAdmin) {
        $keyboard[] = ['‚öôÔ∏è –ê–¥–º–∏–Ω'];
    }
    
    return ['keyboard' => $keyboard, 'resize_keyboard' => true];
}

function getAdminKeyboard() {
    return ['inline_keyboard' => [
        [['text' => 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data' => 'admin_stats']],
        [['text' => 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏', 'callback_data' => 'admin_users']],
        [['text' => '‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', 'callback_data' => 'admin_broadcast']],
        [['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'admin_back']]
    ]];
}

function getUserActionsKeyboard($userId) {
    return ['inline_keyboard' => [[
        ['text' => '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 'callback_data' => "unblock_$userId"],
        ['text' => 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 'callback_data' => "block_$userId"]
    ],[
        ['text' => 'üì® –ù–∞–ø–∏—Å–∞—Ç—å', 'callback_data' => "write_$userId"],
        ['text' => 'üóë –£–¥–∞–ª–∏—Ç—å', 'callback_data' => "delete_$userId"]
    ],[
        ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'admin_users']
    ]]];
}

function getWithdrawKeyboard($userId) {
    return ['inline_keyboard' => [[
        ['text' => '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', 'callback_data' => "approve_$userId"],
        ['text' => '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'callback_data' => "reject_$userId"]
    ]]];
}

// -----------------------------
// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
// -----------------------------
function getBotStats() {
    global $db;
    $stats = [
        'total' => 0,
        'active' => 0,
        'balance' => 0,
        'referrals' => 0
    ];
    
    $topUsers = [];
    
    $result = $db->query("SELECT * FROM users ORDER BY balance DESC");
    while ($user = $result->fetchArray(SQLITE3_ASSOC)) {
        $stats['total']++;
        $stats['balance'] += $user['balance'];
        $stats['referrals'] += $user['referrals'];
        if (!$user['blocked']) $stats['active']++;
        $topUsers[] = $user;
    }
    
    $topUsers = array_slice($topUsers, 0, 5);
    
    $message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n";
    $message .= "üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{$stats['total']}</b>\n";
    $message .= "üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{$stats['active']}</b>\n";
    $message .= "üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{$stats['balance']}</b>\n";
    $message .= "üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{$stats['referrals']}</b>\n";
    $message .= "üèÜ <b>–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>:\n";
    
    foreach ($topUsers as $i => $user) {
        $status = $user['blocked'] ? 'üö´' : '‚úÖ';
        $message .= ($i+1) . ". ID {$user['user_id']}: <b>{$user['balance']}</b> (–†–µ—Ñ: {$user['referrals']}) $status\n";
    }
    
    $message .= "\n‚è± –û–±–Ω–æ–≤–ª–µ–Ω–æ: " . date('d.m.Y H:i:s');
    return $message;
}

// -----------------------------
// üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
// -----------------------------
function handleStart($chatId, $text, &$db) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    $refCode = trim(str_replace('/start', '', $text));
    
    if ($refCode && !getUser($chatId)['referred_by']) {
        $referrer = $db->querySingle("SELECT user_id FROM users WHERE ref_code='$refCode'", true);
        
        if ($referrer && $referrer != $chatId) {
            $db->exec("UPDATE users SET 
                referrals=referrals+1, 
                balance=balance+50 
                WHERE user_id={$referrer}");
                
            sendMessage($referrer, "üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +50 –±–∞–ª–ª–æ–≤.");
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if (!isSubscribed($chatId)) {
        $message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n";
        $message .= "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:";
        sendMessage($chatId, $message, getSubscriptionKeyboard());
        return;
    }
    
    // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    $user = getUser($chatId);
    $refLink = "https://t.me/ $GLOBALS[botUsername]?start={$user['ref_code']}";
    
    $message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ @{$GLOBALS['botUsername']}!\n";
    $message .= "üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –∏ –≤—ã–≤–æ–¥–∏—Ç–µ –∏—Ö\n";
    $message .= "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\n";
    $message .= "<code>$refLink</code>\n";
    $message .= "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!";
    
    sendMessage($chatId, $message, getMainKeyboard($chatId == $GLOBALS['adminId']));
}

function handleEarn($chatId, &$db) {
    $cooldown = 60; // 1 –º–∏–Ω—É—Ç–∞
    $reward = 10; // 10 –±–∞–ª–ª–æ–≤
    
    $user = getUser($chatId);
    $lastEarn = $user['last_earn'];
    $remaining = $cooldown - (time() - $lastEarn);
    
    if ($remaining > 0) {
        sendMessage($chatId, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ $remaining —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º!");
        return;
    }
    
    $db->exec("UPDATE users SET 
        balance=balance+10, 
        last_earn=" . time() . " 
        WHERE user_id=$chatId");
    
    $newBalance = getUser($chatId)['balance'];
    sendMessage($chatId, "‚úÖ +10 –±–∞–ª–ª–æ–≤! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $newBalance");
}

function handleWithdraw($chatId, &$db) {
    global $adminId;
    
    $user = getUser($chatId);
    $balance = $user['balance'];
    
    if ($balance < MIN_WITHDRAW) {
        $needed = MIN_WITHDRAW - $balance;
        sendMessage($chatId, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: " . MIN_WITHDRAW . " –±–∞–ª–ª–æ–≤\n–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: $needed –±–∞–ª–ª–æ–≤");
        return;
    }
    
    $db->exec("UPDATE users SET balance=0, withdraw_status='pending' WHERE user_id=$chatId");
    
    $adminMsg = "üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥\n";
    $adminMsg .= "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $chatId\n";
    $adminMsg .= "üí∞ –°—É–º–º–∞: $balance –±–∞–ª–ª–æ–≤\n";
    $adminMsg .= "‚è± –í—Ä–µ–º—è: " . date('d.m.Y H:i:s');
    
    sendMessage($adminId, $adminMsg, getWithdrawKeyboard($chatId));
    sendMessage($chatId, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ $balance –±–∞–ª–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
}

function handleCallback($callbackQuery) {
    global $db, $adminId;
    
    $chatId = $callbackQuery['message']['chat']['id'];
    $msgId = $callbackQuery['message']['message_id'];
    $data = $callbackQuery['data'];
    
    if ($data === 'check_subscription') {
        if (isSubscribed($chatId)) {
            $user = getUser($chatId);
            $refLink = "https://t.me/ $GLOBALS[botUsername]?start={$user['ref_code']}";
            
            $message = "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n";
            $message .= "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n";
            $message .= "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>$refLink</code>";
            
            sendMessage($chatId, $message, getMainKeyboard($chatId == $adminId));
        } else {
            sendMessage($chatId, "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏.", getSubscriptionKeyboard());
        }
    }
    
    if (strpos($data, 'approve_') === 0) {
        $userId = str_replace('approve_', '', $data);
        $user = getUser($userId);
        
        if ($chatId == $adminId && $user) {
            $amount = $user['balance'];
            $db->exec("UPDATE users SET balance=0 WHERE user_id=$userId");
            
            $adminMsg = "‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\n";
            $adminMsg .= "–°—É–º–º–∞: $amount –±–∞–ª–ª–æ–≤\n";
            $adminMsg .= "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $userId";
            
            editMessage($chatId, $msgId, $adminMsg);
            sendMessage($userId, "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ $amount –±–∞–ª–ª–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–∞!");
        }
    }
    
    if (strpos($data, 'reject_') === 0) {
        $userId = str_replace('reject_', '', $data);
        $user = getUser($userId);
        
        if ($chatId == $adminId && $user) {
            $amount = $user['balance'];
            $db->exec("UPDATE users SET balance=balance WHERE user_id=$userId");
            
            $adminMsg = "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n";
            $adminMsg .= "–°—É–º–º–∞: $amount –±–∞–ª–ª–æ–≤\n";
            $adminMsg .= "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $userId";
            
            editMessage($chatId, $msgId, $adminMsg);
            sendMessage($userId, "‚ö†Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ $amount –±–∞–ª–ª–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.");
        }
    }
    
    if ($data === 'admin_stats') {
        sendMessage($chatId, getBotStats(), ['inline_keyboard' => [[
            ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'admin_back']
        ]]]);
    }
    
    if ($data === 'admin_users') {
        $result = $db->query("SELECT * FROM users ORDER BY balance DESC LIMIT 50");
        $keyboard = ['inline_keyboard' => []];
        
        while ($user = $result->fetchArray(SQLITE3_ASSOC)) {
            $status = $user['blocked'] ? 'üîí' : 'üîì';
            $keyboard['inline_keyboard'][] = [[
                'text' => "ID: {$user['user_id']} | üí∞: {$user['balance']}",
                'callback_data' => "user_{$user['user_id']}"
            ]];
        }
        
        $keyboard['inline_keyboard'][] = [['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'admin_back']];
        sendMessage($chatId, "üë• <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>", $keyboard);
    }
    
    if (strpos($data, 'user_') === 0) {
        $userId = str_replace('user_', '', $data);
        $user = getUser($userId);
        
        $keyboard = getUserActionsKeyboard($userId);
        
        $message = "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n";
        $message .= "ID: <b>{$user['user_id']}</b>\n";
        $message .= "–ë–∞–ª–∞–Ω—Å: <b>{$user['balance']}</b>\n";
        $message .= "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{$user['referrals']}</b>\n";
        $message .= "–ü–æ–¥–ø–∏—Å–∫–∞: " . (isSubscribed($user['user_id']) ? '‚úÖ' : '‚ùå') . "\n";
        $message .= "–°—Ç–∞—Ç—É—Å: " . ($user['blocked'] ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω');
        
        editMessage($chatId, $msgId, $message, $keyboard);
    }
    
    if ($data === 'admin_back') {
        sendMessage($chatId, "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", getAdminKeyboard());
    }
    
    if (strpos($data, 'block_') === 0) {
        $userId = str_replace('block_', '', $data);
        if ($chatId == $adminId && $userId != $adminId) {
            $db->exec("UPDATE users SET blocked=1 WHERE user_id=$userId");
            sendMessage($userId, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
            sendMessage($chatId, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
        }
    }
    
    if (strpos($data, 'unblock_') === 0) {
        $userId = str_replace('unblock_', '', $data);
        if ($chatId == $adminId) {
            $db->exec("UPDATE users SET blocked=0 WHERE user_id=$userId");
            sendMessage($userId, "üéâ –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!");
            sendMessage($chatId, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
        }
    }
}

// -----------------------------
// üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
// -----------------------------
$content = file_get_contents("php://input");
logMessage("Incoming update: $content");
$update = json_decode($content, true);

if (!$update) {
    logMessage("Invalid JSON received");
    echo "OK";
    exit;
}

try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    if (isset($update['callback_query'])) {
        handleCallback($update['callback_query']);
        echo "OK";
        exit;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (isset($update['message'])) {
        $message = $update['message'];
        $chatId = $message['chat']['id'] ?? null;
        
        if (!$chatId) {
            logMessage("Error: No chat ID in message");
            echo "OK";
            exit;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!getUser($chatId)) {
            $username = $message['from']['username'] ?? null;
            $refCode = substr(md5($chatId . time()), 0, 8);
            
            $db->exec("INSERT INTO users (
                user_id, username, balance, referrals, ref_code, referred_by, subscribed, blocked, last_earn
            ) VALUES (
                $chatId, '$username', 0, 0, '$refCode', NULL, 0, 0, 0
            )");
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if (getUser($chatId)['blocked']) {
            sendMessage($chatId, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
            echo "OK";
            exit;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        $text = trim($message['text'] ?? '');
        
        if (strpos($text, '/start') === 0) {
            handleStart($chatId, $text, $db);
        } elseif ($text === 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å') {
            handleEarn($chatId, $db);
        } elseif ($text === 'üí≥ –ë–∞–ª–∞–Ω—Å') {
            $user = getUser($chatId);
            $msg = "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{$user['balance']}</b> –±–∞–ª–ª–æ–≤\n";
            $msg .= "üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{$user['referrals']}</b>";
            sendMessage($chatId, $msg);
        } elseif ($text === 'üèÜ –¢–æ–ø') {
            sendMessage($chatId, getBotStats());
        } elseif ($text === 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã') {
            $user = getUser($chatId);
            $refLink = "https://t.me/ $botUsername?start={$user['ref_code']}";
            
            $msg = "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n";
            $msg .= "–í–∞—à –∫–æ–¥: <code>{$user['ref_code']}</code>\n";
            $msg .= "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{$user['referrals']}</b>\n";
            $msg .= "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n<code>$refLink</code>\n";
            $msg .= "üíµ 50 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞!";
            
            sendMessage($chatId, $msg);
        } elseif ($text === ' mtx') {
            handleWithdraw($chatId, $db);
        } elseif ($text === ' mtw') {
            $msg = "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n";
            $msg .= "üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b> - –ø–æ–ª—É—á–∞–π—Ç–µ 10 –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n";
            $msg .= "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b> - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n";
            $msg .= "mtx <b>–í—ã–≤–æ–¥</b> - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 100 –±–∞–ª–ª–æ–≤\n";
            $msg .= "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!";
            sendMessage($chatId, $msg);
        } elseif ($text === '‚öôÔ∏è –ê–¥–º–∏–Ω' && $chatId == $adminId) {
            sendMessage($chatId, "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", getAdminKeyboard());
        }
    }
} catch (Exception $e) {
    logMessage("Error: ".$e->getMessage()." in ".$e->getFile()." on line ".$e->getLine());
    http_response_code(500);
}

echo "OK";

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
function getUser($userId) {
    global $db;
    return $db->querySingle("SELECT * FROM users WHERE user_id=$userId", true);
}
