<?php
// =============================================
// üöÄ Telegram Bot Webhook Handler for Render.com
// =============================================
// Version 1.6.0: –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã

// --- Configuration ---
define('DEFAULT_DB_FILE', '/tmp/bot_database.db');
define('DEFAULT_ERROR_LOG_FILE', '/tmp/error.log');

$dbFilePath = getenv('DB_FILE_PATH') ?: DEFAULT_DB_FILE;
$errorLogPath = getenv('ERROR_LOG_PATH') ?: DEFAULT_ERROR_LOG_FILE;

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º error_log –¥–ª—è PHP
ini_set('error_log', $errorLogPath);
ini_set('log_errors', 1);
ini_set('display_errors', 0);
error_reporting(E_ALL);

// Health check endpoint
if (isset($_SERVER['REQUEST_URI']) && $_SERVER['REQUEST_URI'] === '/health') {
    header('Content-Type: application/json');
    echo json_encode([
        'status' => 'ok',
        'time' => date('Y-m-d H:i:s'),
        'version' => '1.6.0'
    ]);
    exit;
}

// Register shutdown function for fatal errors
register_shutdown_function(function() use ($errorLogPath) {
    $error = error_get_last();
    if ($error && in_array($error['type'], [E_ERROR, E_CORE_ERROR, E_COMPILE_ERROR, E_USER_ERROR])) {
        $logMessage = sprintf(
            "[%s] Fatal Error: %s in %s on line %d\n",
            date('Y-m-d H:i:s'),
            $error['message'],
            $error['file'],
            $error['line']
        );
        file_put_contents($errorLogPath, $logMessage, FILE_APPEND);
    }
});

// Constants from Environment Variables
$botToken = getenv('TELEGRAM_BOT_TOKEN') ?: '';
$adminId = getenv('ADMIN_ID') ?: '';
$botUsername = getenv('BOT_USERNAME') ?: 'MyTestBot';
$channelId = getenv('CHANNEL_ID') ?: '';
$webhookBaseUrl = getenv('WEBHOOK_BASE_URL') ?: ('https://' . ($_SERVER['HTTP_HOST'] ?? 'localhost'));

// Validate essential config
if (empty($botToken) || empty($adminId)) {
    file_put_contents($errorLogPath, "[".date('Y-m-d H:i:s')."] Missing critical environment variables: TELEGRAM_BOT_TOKEN or ADMIN_ID\n", FILE_APPEND);
    http_response_code(500);
    die("Configuration error: Missing TELEGRAM_BOT_TOKEN or ADMIN_ID");
}

// API URL
$apiUrl = "https://api.telegram.org/bot$botToken";

// -----------------------------
// üõ†Ô∏è Helper Functions
// -----------------------------
function bot_log($message, $level = "INFO") {
    global $errorLogPath;
    $timestamp = date('Y-m-d H:i:s');
    file_put_contents($errorLogPath, "[$timestamp] [$level] $message\n", FILE_APPEND);
}

// Initialize database
try {
    $dataDir = dirname($dbFilePath);
    if (!is_dir($dataDir)) {
        mkdir($dataDir, 0775, true);
    }
    if (!file_exists($dbFilePath) && is_writable($dataDir)) {
        touch($dbFilePath);
    }
    if (file_exists($dbFilePath) && !is_writable($dbFilePath)) {
        chmod($dbFilePath, 0666);
    }

    $db = new SQLite3($dbFilePath);
    $db->exec("CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        balance INTEGER DEFAULT 0,
        referrals INTEGER DEFAULT 0,
        ref_code TEXT UNIQUE,
        referred_by INTEGER,
        blocked BOOLEAN DEFAULT 0,
        last_earn INTEGER DEFAULT 0,
        joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )");
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
    $db->exec("CREATE TABLE IF NOT EXISTS investments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        plan_id INTEGER,
        amount INTEGER,
        start_date INTEGER,
        end_date INTEGER,
        status TEXT DEFAULT 'active',
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )");
} catch (Exception $e) {
    bot_log("DB Error: ".$e->getMessage(), "ERROR");
    http_response_code(500);
    die("Database error: " . $e->getMessage());
}

// Webhook auto-setup
if (isset($_GET['setwebhook']) && $_GET['setwebhook'] === '1') {
    $scriptPath = $_SERVER['PHP_SELF'];
    $webhookUrlToSet = rtrim($webhookBaseUrl, '/') . $scriptPath;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    bot_log("Attempting to set webhook to: $webhookUrlToSet", "INFO");
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    $deleteResult = @file_get_contents("$apiUrl/deleteWebhook");
    bot_log("Delete webhook result: $deleteResult", "INFO");
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
    $setWebhookParams = [
        'url' => $webhookUrlToSet,
        'max_connections' => 40,
        'allowed_updates' => json_encode(['message', 'callback_query'])
    ];
    
    $ch = curl_init("$apiUrl/setWebhook");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $setWebhookParams);
    $result = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    $logEntry = "[".date('Y-m-d H:i:s')."] Webhook setup attempt to $webhookUrlToSet. Result: $result, HTTP Code: $httpCode\n";
    file_put_contents($errorLogPath, $logEntry, FILE_APPEND);
    
    echo "Webhook setup attempt. Result: " . htmlspecialchars($result);
    exit;
}

if (isset($_GET['deletewebhook']) && $_GET['deletewebhook'] === '1') {
    $result = @file_get_contents("$apiUrl/deleteWebhook");
    $logEntry = "[".date('Y-m-d H:i:s')."] Webhook delete attempt. Result: $result\n";
    file_put_contents($errorLogPath, $logEntry, FILE_APPEND);
    echo "Webhook delete attempt. Result: " . htmlspecialchars($result);
    exit;
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ
if (isset($_GET['webhook_info']) && $_GET['webhook_info'] === '1') {
    $result = @file_get_contents("$apiUrl/getWebhookInfo");
    echo "<pre>Webhook Info: " . htmlspecialchars($result) . "</pre>";
    exit;
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
if (isset($_GET['logs']) && $_GET['logs'] === '1') {
    if (file_exists($errorLogPath)) {
        $logs = file_get_contents($errorLogPath);
        $logs = htmlspecialchars($logs);
        echo "<pre>$logs</pre>";
    } else {
        echo "Log file not found at: $errorLogPath";
    }
    exit;
}

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
if (isset($_GET['test_message']) && $_GET['test_message'] === '1') {
    $testFunctionResult = testFormatting($adminId);
    echo "Test message sent to admin. Result: " . json_encode($testFunctionResult);
    exit;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
if (isset($_GET['check_investments']) && $_GET['check_investments'] === '1') {
    checkCompletedInvestments();
    echo "Investment check completed.";
    exit;
}

// Main webhook handler
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    if (! (isset($_SERVER['REQUEST_URI']) && $_SERVER['REQUEST_URI'] === '/health') &&
        ! (isset($_GET['setwebhook']) && $_GET['setwebhook'] === '1') &&
        ! (isset($_GET['deletewebhook']) && $_GET['deletewebhook'] === '1') &&
        ! (isset($_GET['webhook_info']) && $_GET['webhook_info'] === '1') &&
        ! (isset($_GET['logs']) && $_GET['logs'] === '1') &&
        ! (isset($_GET['test_message']) && $_GET['test_message'] === '1') &&
        ! (isset($_GET['check_investments']) && $_GET['check_investments'] === '1')) {
        http_response_code(405);
        echo "Method Not Allowed. This endpoint expects POST requests from Telegram.";
    }
    exit;
}

$content = file_get_contents("php://input");
if (empty($content)) {
    http_response_code(200);
    echo "Empty request body.";
    exit;
}

// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
bot_log("Received update: " . $content, "INFO");

function apiRequest($method, $params = [], $retries = 3) {
    global $apiUrl, $errorLogPath;
    $url = "$apiUrl/$method";

    // –í–∞–∂–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º reply_markup –∫–∞–∫ JSON
    if (isset($params['reply_markup']) && is_array($params['reply_markup'])) {
        $params['reply_markup'] = json_encode($params['reply_markup'], 
            JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
    }

    $ch = curl_init();
    $curlOptions = [
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => $params,
        CURLOPT_TIMEOUT => 10,
        CURLOPT_CONNECTTIMEOUT => 5,
        CURLOPT_SSL_VERIFYPEER => true,
    ];
    curl_setopt_array($ch, $curlOptions);

    for ($i = 0; $i < $retries; $i++) {
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $curlError = curl_error($ch);

        if ($response === false) {
            file_put_contents($errorLogPath, "[".date('Y-m-d H:i:s')."] API Error ($method): cURL Error: $curlError. HTTP Code: $httpCode\n", FILE_APPEND);
            if ($i < $retries - 1) {
                sleep(1 + $i);
                continue;
            }
            curl_close($ch);
            return false;
        }
        
        $result = json_decode($response, true);
        if ($httpCode === 200 && isset($result['ok']) && $result['ok'] === true) {
            curl_close($ch);
            return $result;
        }

        file_put_contents($errorLogPath, "[".date('Y-m-d H:i:s')."] API Error ($method): HTTP $httpCode - Response: $response\n", FILE_APPEND);
        if ($httpCode >= 500 && $i < $retries - 1) {
            sleep(1 + $i); 
            continue;
        }
        
        curl_close($ch);
        return $result;
    }
    return false; 
}

function sendMessage($chatId, $text, $keyboard = null, $message_thread_id = null) {
    $params = [
        'chat_id' => $chatId,
        'text' => $text,
        'parse_mode' => 'HTML',
        'disable_web_page_preview' => true
    ];
    if ($keyboard) {
        $params['reply_markup'] = $keyboard;
    }
    if ($message_thread_id) {
        $params['message_thread_id'] = $message_thread_id;
    }
    return apiRequest('sendMessage', $params);
}

function editMessage($chatId, $msgId, $text, $keyboard = null) {
    $params = [
        'chat_id' => $chatId,
        'message_id' => $msgId,
        'text' => $text,
        'parse_mode' => 'HTML',
        'disable_web_page_preview' => true
    ];
    if ($keyboard) {
        $params['reply_markup'] = $keyboard;
    }
    return apiRequest('editMessageText', $params);
}

function answerCallbackQuery($callbackQueryId, $text = null, $showAlert = false) {
    $params = ['callback_query_id' => $callbackQueryId];
    if ($text !== null) {
        $params['text'] = $text;
    }
    $params['show_alert'] = $showAlert;
    return apiRequest('answerCallbackQuery', $params);
}

function isSubscribed($userId) {
    global $botToken, $channelId;
    if (empty($channelId)) {
        return true;
    }
    
    $url = "https://api.telegram.org/bot$botToken/getChatMember?chat_id=" . $channelId . "&user_id=$userId";
    $response = @file_get_contents($url); 
    if ($response === false) {
        bot_log("isSubscribed: Failed to fetch from $url. User: $userId", "ERROR");
        return false;
    }
    $data = json_decode($response, true);

    if (!isset($data['ok']) || $data['ok'] === false) {
        if (isset($data['description'])) {
            if (strpos($data['description'], "not found") !== false || 
                strpos($data['description'], "kicked") !== false) {
                return false;
            }
        }
        return false;
    }
    return isset($data['result']['status']) && in_array($data['result']['status'], ['member', 'administrator', 'creator']);
}

// Test function for formatting
function testFormatting($adminId) {
    return sendMessage($adminId, 
        "<b>–¢–µ—Å—Ç –∂–∏—Ä–Ω–æ–≥–æ</b>\n" .
        "<i>–¢–µ—Å—Ç –∫—É—Ä—Å–∏–≤–∞</i>\n" .
        "<code>–¢–µ—Å—Ç –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ</code>\n" .
        "<pre>–¢–µ—Å—Ç –±–ª–æ–∫–∞ –∫–æ–¥–∞</pre>\n" .
        "<a href='https://t.me/'>–¢–µ—Å—Ç —Å—Å—ã–ª–∫–∏</a>"
    );
}

// -----------------------------
// üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã
// -----------------------------
$investmentPlans = [
    1 => [
        'name' => '–ë–∞–∑–æ–≤—ã–π',
        'min_amount' => 100,
        'days' => 10,
        'percent' => 20, // 2% –≤ –¥–µ–Ω—å = 20% –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
        'description' => '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ 10 –¥–Ω–µ–π —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é 20%'
    ],
    2 => [
        'name' => '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
        'min_amount' => 500,
        'days' => 20,
        'percent' => 50, // 2.5% –≤ –¥–µ–Ω—å = 50% –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
        'description' => '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ 20 –¥–Ω–µ–π —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é 50%'
    ],
    3 => [
        'name' => '–ü—Ä–µ–º–∏—É–º',
        'min_amount' => 1000,
        'days' => 30,
        'percent' => 90, // 3% –≤ –¥–µ–Ω—å = 90% –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
        'description' => '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é 90%'
    ]
];

function createInvestment($userId, $planId, $amount) {
    global $db, $investmentPlans;
    
    if (!isset($investmentPlans[$planId])) {
        return false;
    }
    
    $plan = $investmentPlans[$planId];
    $startDate = time();
    $endDate = $startDate + ($plan['days'] * 86400); // days * seconds in a day
    
    $stmt = $db->prepare("INSERT INTO investments (user_id, plan_id, amount, start_date, end_date, status) 
                         VALUES (:user_id, :plan_id, :amount, :start_date, :end_date, 'active')");
    $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
    $stmt->bindValue(':plan_id', $planId, SQLITE3_INTEGER);
    $stmt->bindValue(':amount', $amount, SQLITE3_INTEGER);
    $stmt->bindValue(':start_date', $startDate, SQLITE3_INTEGER);
    $stmt->bindValue(':end_date', $endDate, SQLITE3_INTEGER);
    
    if ($stmt->execute()) {
        // –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $updateBalanceStmt = $db->prepare("UPDATE users SET balance = balance - :amount WHERE user_id = :user_id");
        $updateBalanceStmt->bindValue(':amount', $amount, SQLITE3_INTEGER);
        $updateBalanceStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $updateBalanceStmt->execute();
        return true;
    }
    
    return false;
}

function getUserActiveInvestments($userId) {
    global $db, $investmentPlans;
    
    $stmt = $db->prepare("SELECT * FROM investments WHERE user_id = :user_id AND status = 'active'");
    $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
    $result = $stmt->execute();
    
    $investments = [];
    while ($row = $result->fetchArray(SQLITE3_ASSOC)) {
        $planId = $row['plan_id'];
        $plan = $investmentPlans[$planId] ?? ['name' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω'];
        
        $row['plan_name'] = $plan['name'];
        $row['percent'] = $plan['percent'];
        $row['days'] = $plan['days'];
        $row['profit'] = round($row['amount'] * ($plan['percent'] / 100));
        $row['total'] = $row['amount'] + $row['profit'];
        $row['days_left'] = max(0, ceil(($row['end_date'] - time()) / 86400));
        
        $investments[] = $row;
    }
    
    return $investments;
}

function checkCompletedInvestments() {
    global $db, $investmentPlans;
    
    $now = time();
    $stmt = $db->prepare("SELECT * FROM investments WHERE status = 'active' AND end_date <= :now");
    $stmt->bindValue(':now', $now, SQLITE3_INTEGER);
    $result = $stmt->execute();
    
    while ($investment = $result->fetchArray(SQLITE3_ASSOC)) {
        $userId = $investment['user_id'];
        $planId = $investment['plan_id'];
        $amount = $investment['amount'];
        
        if (!isset($investmentPlans[$planId])) {
            continue;
        }
        
        $plan = $investmentPlans[$planId];
        $profit = round($amount * ($plan['percent'] / 100));
        $total = $amount + $profit;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        $updateInvStmt = $db->prepare("UPDATE investments SET status = 'completed' WHERE id = :id");
        $updateInvStmt->bindValue(':id', $investment['id'], SQLITE3_INTEGER);
        $updateInvStmt->execute();
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $updateBalanceStmt = $db->prepare("UPDATE users SET balance = balance + :total WHERE user_id = :user_id");
        $updateBalanceStmt->bindValue(':total', $total, SQLITE3_INTEGER);
        $updateBalanceStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $updateBalanceStmt->execute();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $balanceStmt = $db->prepare("SELECT balance FROM users WHERE user_id = :user_id");
        $balanceStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $balanceResult = $balanceStmt->execute()->fetchArray(SQLITE3_ASSOC);
        $currentBalance = $balanceResult['balance'];
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        $message = "üöÄ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n";
        $message .= "–í–∞—à –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞–Ω <b>{$plan['name']}</b> –Ω–∞ {$plan['days']} –¥–Ω–µ–π –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –∏ –ø—Ä–∏–Ω—ë—Å –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. ";
        $message .= "–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è –í–∞—à –∫–∞–ø–∏—Ç–∞–ª –≤—ã—Ä–æ—Å –Ω–∞ {$plan['percent']}% –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—É–º–º—ã.\n\n";
        $message .= "üí≥ –°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: <b>{$amount}‚ÇΩ</b>\n";
        $message .= "üí∞ –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{$profit}‚ÇΩ</b>\n";
        $message .= "üíº –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{$currentBalance}‚ÇΩ</b>\n\n";
        $message .= "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!\n";
        $message .= "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n";
        $message .= "–í–∞—à –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç ü§ñ";
        
        sendMessage($userId, $message);
    }
}

// -----------------------------
// ‚å®Ô∏è Keyboards (All Inline)
// -----------------------------
function getSubscriptionKeyboard() {
    global $channelId;
    if (empty($channelId)) return null;

    $channelUrl = '';
    if (strpos((string)$channelId, "-100") === 0) {
        $channelIdForLink = substr((string)$channelId, 4);
        $channelUrl = 'https://t.me/c/' . $channelIdForLink;
    } elseif ($channelId[0] === '@') {
        $channelUrl = 'https://t.me/' . ltrim($channelId, '@');
    } else {
        bot_log("Cannot generate channel URL for Channel ID: $channelId", "WARNING");
        return null;
    }

    return [
        'inline_keyboard' => [[
            ['text' => 'üì¢ –ù–∞—à –∫–∞–Ω–∞–ª', 'url' => $channelUrl],
            ['text' => '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'callback_data' => 'check_subscription']
        ]]
    ];
}

function getMainMenuInlineKeyboard($isAdmin = false) {
    $inline_keyboard = [
        [
            ['text' => 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', 'callback_data' => 'earn_money'],
            ['text' => 'üí≥ –ë–∞–ª–∞–Ω—Å', 'callback_data' => 'show_balance']
        ],
        [
            ['text' => 'üìä –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', 'callback_data' => 'show_investment_plans'],
            ['text' => 'üìà –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'callback_data' => 'show_my_investments']
        ],
        [
            ['text' => 'üèÜ –¢–æ–ø', 'callback_data' => 'show_top_users'],
            ['text' => 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'callback_data' => 'show_referrals_info']
        ],
        [
            ['text' => 'üí∏ –í—ã–≤–æ–¥', 'callback_data' => 'initiate_withdraw'],
            ['text' => '‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'callback_data' => 'show_help_info']
        ]
    ];
    if ($isAdmin) {
        $inline_keyboard[] = [['text' => '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'callback_data' => 'admin_panel_show']];
    }
    return ['inline_keyboard' => $inline_keyboard];
}

function getBackToMainMenuKeyboard() {
    return ['inline_keyboard' => [[['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'main_menu_show']]]];
}

function getInvestmentPlansKeyboard() {
    global $investmentPlans;
    
    $keyboard = ['inline_keyboard' => []];
    
    foreach ($investmentPlans as $id => $plan) {
        $keyboard['inline_keyboard'][] = [[
            'text' => "üìä {$plan['name']} - {$plan['percent']}% –∑–∞ {$plan['days']} –¥–Ω–µ–π",
            'callback_data' => "select_investment_plan_$id"
        ]];
    }
    
    $keyboard['inline_keyboard'][] = [['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'main_menu_show']];
    
    return $keyboard;
}

function getInvestmentAmountKeyboard($planId) {
    global $investmentPlans;
    
    $plan = $investmentPlans[$planId] ?? null;
    if (!$plan) {
        return getBackToMainMenuKeyboard();
    }
    
    $minAmount = $plan['min_amount'];
    
    $keyboard = ['inline_keyboard' => [
        [
            ['text' => "$minAmount‚ÇΩ", 'callback_data' => "invest_{$planId}_{$minAmount}"],
            ['text' => ($minAmount*2)."‚ÇΩ", 'callback_data' => "invest_{$planId}_".($minAmount*2)]
        ],
        [
            ['text' => ($minAmount*5)."‚ÇΩ", 'callback_data' => "invest_{$planId}_".($minAmount*5)],
            ['text' => ($minAmount*10)."‚ÇΩ", 'callback_data' => "invest_{$planId}_".($minAmount*10)]
        ],
        [['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º', 'callback_data' => 'show_investment_plans']],
        [['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'callback_data' => 'main_menu_show']]
    ]];
    
    return $keyboard;
}

function getAdminPanelKeyboard() {
    return ['inline_keyboard' => [
        [['text' => 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data' => 'admin_stats_show']],
        [['text' => 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏', 'callback_data' => 'admin_users_list']],
        [['text' => 'üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'callback_data' => 'admin_investments_list']],
        [['text' => '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu_show']]
    ]];
}

function getBackToAdminPanelKeyboard() {
    return ['inline_keyboard' => [[['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'callback_data' => 'admin_panel_show']]]];
}

function getWithdrawKeyboard($targetUserId) { 
    return ['inline_keyboard' => [[
        ['text' => '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', 'callback_data' => "approve_withdraw_$targetUserId"],
        ['text' => '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'callback_data' => "reject_withdraw_$targetUserId"]
    ]]];
}

function getUserActionsKeyboard($targetUserId, $isBlocked) {
    $blockButtonText = $isBlocked ? '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å';
    $blockCallbackData = $isBlocked ? "unblock_user_$targetUserId" : "block_user_$targetUserId";
    return ['inline_keyboard' => [
        [
            ['text' => $blockButtonText, 'callback_data' => $blockCallbackData]
        ],
        [
            ['text' => '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', 'callback_data' => 'admin_users_list'] 
        ]
    ]];
}

// -----------------------------
// üìä Bot Stats & Info
// -----------------------------
function getBotStatsText() {
    global $db;
    $stats = ['total' => 0, 'active' => 0, 'balance' => 0, 'referrals' => 0];
    $topUsers = [];

    $result = $db->query("SELECT user_id, username, balance, referrals, blocked FROM users ORDER BY balance DESC");
    if (!$result) {
        bot_log("Error fetching users for stats: " . $db->lastErrorMsg(), "ERROR");
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.";
    }

    while ($user = $result->fetchArray(SQLITE3_ASSOC)) {
        $stats['total']++;
        $stats['balance'] += $user['balance'];
        $stats['referrals'] += $user['referrals'];
        if (!$user['blocked']) $stats['active']++;
        if (count($topUsers) < 5) { 
            $topUsers[] = $user;
        }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º
    $investmentStats = ['total' => 0, 'active' => 0, 'completed' => 0, 'total_amount' => 0];
    $invResult = $db->query("SELECT status, amount FROM investments");
    while ($inv = $invResult->fetchArray(SQLITE3_ASSOC)) {
        $investmentStats['total']++;
        $investmentStats['total_amount'] += $inv['amount'];
        if ($inv['status'] === 'active') {
            $investmentStats['active']++;
        } else if ($inv['status'] === 'completed') {
            $investmentStats['completed']++;
        }
    }

       $message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n";
    $message .= "üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{$stats['total']}</b>\n";
    $message .= "üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö): <b>{$stats['active']}</b>\n";
    $message .= "üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{$stats['balance']}</b>\n";
    $message .= "üîó –í—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{$stats['referrals']}</b>\n\n";
    
    $message .= "üìà <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</b>\n";
    $message .= "üíº –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: <b>{$investmentStats['total']}</b>\n";
    $message .= "‚è≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: <b>{$investmentStats['active']}</b>\n";
    $message .= "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: <b>{$investmentStats['completed']}</b>\n";
    $message .= "üíµ –û–±—â–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: <b>{$investmentStats['total_amount']}‚ÇΩ</b>\n\n";
    
    $message .= "üèÜ <b>–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É</b>:\n";
    if (empty($topUsers)) {
        $message .= "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–æ–ø–µ.\n";
    } else {
        foreach ($topUsers as $i => $user) {
            $status = $user['blocked'] ? 'üö´' : '‚úÖ';
            $usernameDisplay = $user['username'] ? htmlspecialchars("@".$user['username']) : "ID: ".$user['user_id'];
            $message .= ($i+1) . ". $usernameDisplay - <b>{$user['balance']}</b> –±–∞–ª–ª–æ–≤ (–†–µ—Ñ: {$user['referrals']}) $status\n";
        }
    }
    $message .= "\n‚è± –û–±–Ω–æ–≤–ª–µ–Ω–æ: " . date('d.m.Y H:i:s');
    return $message;
}

// -----------------------------
// üì® Command Handlers & Callback Logic
// -----------------------------
function handleStart($chatId, $userId, $text) {
    global $db, $botUsername, $adminId, $channelId;

    $refCode = '';
    if (strpos($text, ' ') !== false) {
        $parts = explode(' ', $text, 2);
        if (count($parts) > 1) {
            $refCode = trim($parts[1]);
        }
    }

    $userExistsStmt = $db->prepare("SELECT 1 FROM users WHERE user_id = :user_id");
    $userExistsStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
    $userExistsResult = $userExistsStmt->execute()->fetchArray(SQLITE3_ASSOC);

    if ($userExistsResult && !empty($refCode)) {
        $userReferralInfoStmt = $db->prepare("SELECT referred_by FROM users WHERE user_id = :user_id");
        $userReferralInfoStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $userReferralInfo = $userReferralInfoStmt->execute()->fetchArray(SQLITE3_ASSOC);

        if ($userReferralInfo && empty($userReferralInfo['referred_by'])) { 
            $referrerQuery = $db->prepare("SELECT user_id FROM users WHERE ref_code = :ref_code AND user_id != :user_id");
            $referrerQuery->bindValue(':ref_code', $refCode, SQLITE3_TEXT);
            $referrerQuery->bindValue(':user_id', $userId, SQLITE3_INTEGER);
            $referrerResult = $referrerQuery->execute();
            $referrer = $referrerResult->fetchArray(SQLITE3_ASSOC);

            if ($referrer && $referrer['user_id'] != $userId) {
                $updateReferrerStmt = $db->prepare("UPDATE users SET referrals = referrals + 1, balance = balance + 50 WHERE user_id = :referrer_id");
                $updateReferrerStmt->bindValue(':referrer_id', $referrer['user_id'], SQLITE3_INTEGER);
                $updateReferrerStmt->execute();
                sendMessage($referrer['user_id'], "üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! <b>+50 –±–∞–ª–ª–æ–≤</b> –Ω–∞ –≤–∞—à —Å—á–µ—Ç.");
                
                $updateUserStmt = $db->prepare("UPDATE users SET referred_by = :referrer_id WHERE user_id = :user_id");
                $updateUserStmt->bindValue(':referrer_id', $referrer['user_id'], SQLITE3_INTEGER);
                $updateUserStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
                $updateUserStmt->execute();
            }
        }
    }
    
    if (!empty($channelId) && !isSubscribed($userId) && $userId != $adminId) {
        $message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ @$botUsername!\n\n";
        $message .= "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b>. –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n\n";
        $message .= "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.";
        $subKeyboard = getSubscriptionKeyboard();
        if ($subKeyboard) {
            sendMessage($chatId, $message, $subKeyboard);
        } else {
            sendMessage($chatId, $message . "\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
        }
        return;
    }

    $userStmt = $db->prepare("SELECT ref_code FROM users WHERE user_id = :user_id");
    $userStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
    $user = $userStmt->execute()->fetchArray(SQLITE3_ASSOC);
    $refLink = "https://t.me/$botUsername?start=" . ($user['ref_code'] ?? '');

    $message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ @$botUsername!\n\n";
    $message .= "üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–∞–ª–ª—ã, –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏ –≤—ã–≤–æ–¥–∏—Ç–µ –ø—Ä–∏–±—ã–ª—å.\n";
    $message .= "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã! –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>$refLink</code>\n\n";
    $message .= "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.";
    sendMessage($chatId, $message, getMainMenuInlineKeyboard($userId == $adminId));
}

function handleCallback($callbackQuery) {
    global $db, $adminId, $botUsername, $channelId, $investmentPlans;

    $callbackQueryId = $callbackQuery['id'];
    $chatId = $callbackQuery['message']['chat']['id'];
    $msgId = $callbackQuery['message']['message_id'];
    $userId = $callbackQuery['from']['id']; 
    $data = $callbackQuery['data'];
    $userIsAdmin = ($userId == $adminId);

    // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å –∫–Ω–æ–ø–∫–∏
    $callbackAnswered = false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if ($data === 'check_subscription') {
        if (!empty($channelId) && isSubscribed($userId)) {
            $userStmt = $db->prepare("SELECT ref_code FROM users WHERE user_id = :user_id");
            $userStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
            $user = $userStmt->execute()->fetchArray(SQLITE3_ASSOC);
            $refLink = "https://t.me/$botUsername?start=" . ($user['ref_code'] ?? '');
            $message = "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:\n<code>$refLink</code>\n\n";
            $message .= "üëá –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:";
            editMessage($chatId, $msgId, $message, getMainMenuInlineKeyboard($userIsAdmin));
            answerCallbackQuery($callbackQueryId);
            $callbackAnswered = true;
        } else if (empty($channelId)) {
            $message = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n";
            $message .= "üëá –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:";
            editMessage($chatId, $msgId, $message, getMainMenuInlineKeyboard($userIsAdmin));
            answerCallbackQuery($callbackQueryId);
            $callbackAnswered = true;
        } else {
            answerCallbackQuery($callbackQueryId, "‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.", true);
            $callbackAnswered = true;
        }
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if (!$userIsAdmin && !empty($channelId) && !isSubscribed($userId)) {
        $text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b>, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.";
        $subKeyboard = getSubscriptionKeyboard();
        if ($subKeyboard) {
            editMessage($chatId, $msgId, $text, $subKeyboard);
        } else {
            editMessage($chatId, $msgId, $text . "\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
        }
        answerCallbackQuery($callbackQueryId);
        return;
    }

    // --- Main Menu Callbacks ---
    if ($data === 'main_menu_show') {
        $userStmt = $db->prepare("SELECT ref_code FROM users WHERE user_id = :user_id");
        $userStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $user = $userStmt->execute()->fetchArray(SQLITE3_ASSOC);
        $refLink = "https://t.me/$botUsername?start=" . ($user['ref_code'] ?? '');
        $message = "üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> @$botUsername!\n\n";
        $message .= "üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –∏ –≤—ã–≤–æ–¥–∏—Ç–µ –∏—Ö.\n";
        $message .= "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: <code>$refLink</code>\n\n";
        $message .= "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:";
        editMessage($chatId, $msgId, $message, getMainMenuInlineKeyboard($userIsAdmin));
        answerCallbackQuery($callbackQueryId);
        $callbackAnswered = true;
    }

    else if ($data === 'earn_money') {
        $stmt = $db->prepare("SELECT balance FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $row = $stmt->execute()->fetchArray(SQLITE3_ASSOC);
        
        $earnedAmount = 100; // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 100 –±–∞–ª–ª–æ–≤
        $updateStmt = $db->prepare("UPDATE users SET balance = balance + :amount WHERE user_id = :user_id");
        $updateStmt->bindValue(':amount', $earnedAmount, SQLITE3_INTEGER);
        $updateStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $updateStmt->execute();
        $newBalance = ($row['balance'] ?? 0) + $earnedAmount;
        
        $message = "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n";
        $message .= "–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>+$earnedAmount –±–∞–ª–ª–æ–≤</b>!\n";
        $message .= "–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>$newBalance –±–∞–ª–ª–æ–≤</b>\n\n";
        $message .= "–í—ã –º–æ–∂–µ—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å!";
        
        editMessage($chatId, $msgId, $message, getMainMenuInlineKeyboard($userIsAdmin));
        answerCallbackQuery($callbackQueryId, "‚úÖ +$earnedAmount –±–∞–ª–ª–æ–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: $newBalance", false);
        $callbackAnswered = true;
    }

    else if ($data === 'show_balance') {
        $stmt = $db->prepare("SELECT balance FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $balance = $stmt->execute()->fetchArray(SQLITE3_ASSOC)['balance'] ?? 0;
        
        $message = "üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\n\n";
        $message .= "–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>$balance –±–∞–ª–ª–æ–≤</b>\n\n";
        $message .= "–í—ã –º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å:\n";
        $message .= "‚Ä¢ –ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å¬ª\n";
        $message .= "‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É—è –≤ –æ–¥–∏–Ω –∏–∑ –ø–ª–∞–Ω–æ–≤\n";
        $message .= "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n";
        
        editMessage($chatId, $msgId, $message, getBackToMainMenuKeyboard());
        answerCallbackQuery($callbackQueryId);
        $callbackAnswered = true;
    }

    else if ($data === 'show_investment_plans') {
        $stmt = $db->prepare("SELECT balance FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $balance = $stmt->execute()->fetchArray(SQLITE3_ASSOC)['balance'] ?? 0;
        
        $message = "üìä <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã</b>\n\n";
        $message .= "–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>$balance –±–∞–ª–ª–æ–≤</b>\n\n";
        $message .= "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n";
        
        foreach ($investmentPlans as $id => $plan) {
            $message .= "<b>{$plan['name']}</b>\n";
            $message .= "üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {$plan['min_amount']}‚ÇΩ\n";
            $message .= "‚è± –°—Ä–æ–∫: {$plan['days']} –¥–Ω–µ–π\n";
            $message .= "üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {$plan['percent']}%\n";
            $message .= "üíµ –ü—Ä–∏–º–µ—Ä: 1000‚ÇΩ ‚Üí " . (1000 + 1000 * $plan['percent'] / 100) . "‚ÇΩ\n\n";
        }
        
        editMessage($chatId, $msgId, $message, getInvestmentPlansKeyboard());
        answerCallbackQuery($callbackQueryId);
        $callbackAnswered = true;
    }

    else if (strpos($data, 'select_investment_plan_') === 0) {
        $planId = (int)str_replace('select_investment_plan_', '', $data);
        
        if (!isset($investmentPlans[$planId])) {
            answerCallbackQuery($callbackQueryId, "–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", true);
            $callbackAnswered = true;
            return;
        }
        
        $plan = $investmentPlans[$planId];
        $stmt = $db->prepare("SELECT balance FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $balance = $stmt->execute()->fetchArray(SQLITE3_ASSOC)['balance'] ?? 0;
        
        $message = "üí∞ <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞–Ω: {$plan['name']}</b>\n\n";
        $message .= "‚è± –°—Ä–æ–∫: {$plan['days']} –¥–Ω–µ–π\n";
        $message .= "üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {$plan['percent']}%\n";
        $message .= "üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {$plan['min_amount']}‚ÇΩ\n\n";
        $message .= "–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>$balance –±–∞–ª–ª–æ–≤</b>\n\n";
        $message .= "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:";
        
        editMessage($chatId, $msgId, $message, getInvestmentAmountKeyboard($planId));
        answerCallbackQuery($callbackQueryId);
        $callbackAnswered = true;
    }

    else if (strpos($data, 'invest_') === 0) {
        $parts = explode('_', $data);
        if (count($parts) !== 3) {
            answerCallbackQuery($callbackQueryId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", true);
            $callbackAnswered = true;
            return;
        }
        
        $planId = (int)$parts[1];
        $amount = (int)$parts[2];
        
        if (!isset($investmentPlans[$planId])) {
            answerCallbackQuery($callbackQueryId, "–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", true);
            $callbackAnswered = true;
            return;
        }
        
        $plan = $investmentPlans[$planId];
        $stmt = $db->prepare("SELECT balance FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $balance = $stmt->execute()->fetchArray(SQLITE3_ASSOC)['balance'] ?? 0;
        
        if ($balance < $amount) {
            answerCallbackQuery($callbackQueryId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", true);
            $callbackAnswered = true;
            return;
        }
        
        if ($amount < $plan['min_amount']) {
            answerCallbackQuery($callbackQueryId, "–°—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π", true);
            $callbackAnswered = true;
            return;
        }
        
        if (createInvestment($userId, $planId, $amount)) {
            $profit = round($amount * ($plan['percent'] / 100));
            $total = $amount + $profit;
            
            $message = "‚úÖ <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n";
            $message .= "üìä –ü–ª–∞–Ω: <b>{$plan['name']}</b>\n";
            $message .= "üí∞ –°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: <b>$amount‚ÇΩ</b>\n";
            $message .= "‚è± –°—Ä–æ–∫: <b>{$plan['days']} –¥–Ω–µ–π</b>\n";
            $message .= "üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: <b>$profit‚ÇΩ</b>\n";
            $message .= "üíµ –ö –ø–æ–ª—É—á–µ–Ω–∏—é —á–µ—Ä–µ–∑ {$plan['days']} –¥–Ω–µ–π: <b>$total‚ÇΩ</b>\n\n";
            $message .= "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏¬ª.";
            
            editMessage($chatId, $msgId, $message, getBackToMainMenuKeyboard());
            answerCallbackQuery($callbackQueryId, "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", false);
            $callbackAnswered = true;
        } else {
            answerCallbackQuery($callbackQueryId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", true);
            $callbackAnswered = true;
        }
    }

    else if ($data === 'show_my_investments') {
        $investments = getUserActiveInvestments($userId);
        
        $message = "üìà <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</b>\n\n";
        
        if (empty($investments)) {
            $message .= "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.\n\n";
            $message .= "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª.";
        } else {
            foreach ($investments as $index => $inv) {
                $message .= "<b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è #" . ($index + 1) . "</b>\n";
                $message .= "üìä –ü–ª–∞–Ω: <b>{$inv['plan_name']}</b>\n";
                $message .= "üí∞ –°—É–º–º–∞: <b>{$inv['amount']}‚ÇΩ</b>\n";
                $message .= "‚è± –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{$inv['days_left']}</b>\n";
                $message .= "üìà –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{$inv['profit']}‚ÇΩ</b>\n";
                $message .= "üíµ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: <b>{$inv['total']}‚ÇΩ</b>\n";
                $message .= "üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " . date('d.m.Y', $inv['start_date']) . "\n";
                $message .= "üìÖ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: " . date('d.m.Y', $inv['end_date']) . "\n\n";
            }
        }
        
        editMessage($chatId, $msgId, $message, getBackToMainMenuKeyboard());
        answerCallbackQuery($callbackQueryId);
        $callbackAnswered = true;
    }

    else if ($data === 'show_top_users') {
        editMessage($chatId, $msgId, getBotStatsText(), getBackToMainMenuKeyboard());
        answerCallbackQuery($callbackQueryId);
        $callbackAnswered = true;
    }

    else if ($data === 'show_referrals_info') {
        $stmt = $db->prepare("SELECT ref_code, referrals FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $user = $stmt->execute()->fetchArray(SQLITE3_ASSOC);
        $refLink = "https://t.me/$botUsername?start=" . ($user['ref_code'] ?? '');
        $msg = "üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n";
        $msg .= "–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: <code>" . ($user['ref_code'] ?? 'N/A'). "</code>\n";
        $msg .= "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>" . ($user['referrals'] ?? 0) . "</b> —á–µ–ª.\n";
        $msg .= "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n<code>$refLink</code>\n\n";
        $msg .= "üí∞ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>50 –±–∞–ª–ª–æ–≤</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞!";
        editMessage($chatId, $msgId, $msg, getBackToMainMenuKeyboard());
        answerCallbackQuery($callbackQueryId);
        $callbackAnswered = true;
    }

    else if ($data === 'initiate_withdraw') {
        $stmt = $db->prepare("SELECT balance FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $userRow = $stmt->execute()->fetchArray(SQLITE3_ASSOC);
        $balance = $userRow['balance'] ?? 0;
        $minWithdraw = 100;

        if ($balance < $minWithdraw) {
            $needed = $minWithdraw - $balance;
            answerCallbackQuery($callbackQueryId, "‚ùå –ú–∏–Ω. —Å—É–º–º–∞: $minWithdraw –±–∞–ª–ª–æ–≤. –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: $needed.", true);
            $callbackAnswered = true;
        } else {
            $userFrom = $callbackQuery['from'];
            $usernameFrom = isset($userFrom['username']) ? "@".htmlspecialchars($userFrom['username']) : "ID: ".$userId;

            $adminMsg = "üîî <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n\n";
            $adminMsg .= "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $usernameFrom (ID: $userId)\n";
            $adminMsg .= "üí∞ –°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: <b>$balance</b> –±–∞–ª–ª–æ–≤\n";
            $adminMsg .= "‚è± –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: " . date('d.m.Y H:i:s');

            sendMessage($adminId, $adminMsg, getWithdrawKeyboard($userId));
            $userConfirmationMsg = "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ $balance –±–∞–ª–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ.";
            answerCallbackQuery($callbackQueryId, $userConfirmationMsg, false);
            $callbackAnswered = true;
        }
    }

    else if ($data === 'show_help_info') {
        $msg = "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ü–æ–º–æ—â—å</b>\n\n";
        $msg .= "ü§ñ @$botUsername - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç.\n\n";
        $msg .= "üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b> ‚Äî –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã.\n";
        $msg .= "üí≥ <b>–ë–∞–ª–∞–Ω—Å</b> ‚Äî –£–∑–Ω–∞—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.\n";
        $msg .= "üìä <b>–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å</b> ‚Äî –í—ã–±—Ä–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞–Ω.\n";
        $msg .= "üìà <b>–ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</b> ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.\n";
        $msg .= "üèÜ <b>–¢–æ–ø</b> ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n";
        $msg .= "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b> ‚Äî –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.\n";
        $msg .= "üí∏ <b>–í—ã–≤–æ–¥</b> ‚Äî –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥ (–º–∏–Ω. 100 –±–∞–ª–ª–æ–≤).\n\n";
        if (!empty($channelId)) $msg .= "üì¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª!\n\n";
        $msg .= "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.";
        editMessage($chatId, $msgId, $msg, getBackToMainMenuKeyboard());
        answerCallbackQuery($callbackQueryId);
        $callbackAnswered = true;
    }

    // --- Admin Panel Callbacks ---
    else if ($userIsAdmin) { // Group all admin actions here
        if ($data === 'admin_panel_show') {
            editMessage($chatId, $msgId, "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", getAdminPanelKeyboard());
            answerCallbackQuery($callbackQueryId);
            $callbackAnswered = true;
        }
        else if ($data === 'admin_stats_show') {
            editMessage($chatId, $msgId, getBotStatsText(), getBackToAdminPanelKeyboard());
            answerCallbackQuery($callbackQueryId);
            $callbackAnswered = true;
        }
        else if ($data === 'admin_investments_list') {
            $result = $db->query("SELECT i.*, u.username FROM investments i 
                                 JOIN users u ON i.user_id = u.user_id 
                                 WHERE i.status = 'active' 
                                 ORDER BY i.end_date ASC LIMIT 20");
            
            $message = "üí∞ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)</b>:\n\n";
            $count = 0;
            
            if ($result) {
                while ($inv = $result->fetchArray(SQLITE3_ASSOC)) {
                    $count++;
                    $planId = $inv['plan_id'];
                    $plan = $investmentPlans[$planId] ?? ['name' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω'];
                    $username = $inv['username'] ? "@".htmlspecialchars($inv['username']) : "ID:".$inv['user_id'];
                    
                    $message .= "<b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è #" . $inv['id'] . "</b>\n";
                    $message .= "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $username\n";
                    $message .= "üìä –ü–ª–∞–Ω: {$plan['name']}\n";
                    $message .= "üí∞ –°—É–º–º–∞: {$inv['amount']}‚ÇΩ\n";
                    $message .= "üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: " . date('d.m.Y', $inv['end_date']) . "\n\n";
                }
            }
            
            if ($count == 0) $message .= "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.";
            
            $message .= "\n‚ö†Ô∏è –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç <code>/check_investments=1</code>";
            
            editMessage($chatId, $msgId, $message, getBackToAdminPanelKeyboard());
            answerCallbackQuery($callbackQueryId);
            $callbackAnswered = true;
        }
        else if ($data === 'admin_users_list') {
                        $result = $db->query("SELECT user_id, username, balance, blocked FROM users ORDER BY joined_at DESC LIMIT 20"); 
            $usersKeyboard = ['inline_keyboard' => []];
            $userListText = "üë• <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)</b>:\n\n";
            $count = 0;
            if ($result) {
                while ($user = $result->fetchArray(SQLITE3_ASSOC)) {
                    $count++;
                    $statusIcon = $user['blocked'] ? 'üö´' : '‚úÖ';
                    $usernameDisplay = $user['username'] ? htmlspecialchars("@".$user['username']) : "ID:".$user['user_id'];
                    $usersKeyboard['inline_keyboard'][] = [[
                        'text' => "$statusIcon $usernameDisplay | üí∞: {$user['balance']}",
                        'callback_data' => "admin_user_details_{$user['user_id']}"
                    ]];
                }
            }
            if ($count == 0) $userListText .= "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.";

            $usersKeyboard['inline_keyboard'][] = [['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'callback_data' => 'admin_panel_show']];
            editMessage($chatId, $msgId, $userListText, $usersKeyboard);
            answerCallbackQuery($callbackQueryId);
            $callbackAnswered = true;
        }
        else if (strpos($data, 'admin_user_details_') === 0) {
            $targetUserId = (int)str_replace('admin_user_details_', '', $data);
            $stmt = $db->prepare("SELECT * FROM users WHERE user_id = :user_id");
            $stmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
            $user = $stmt->execute()->fetchArray(SQLITE3_ASSOC);

            if ($user) {
                $message = "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n";
                $message .= "ID: <b>{$user['user_id']}</b>\n";
                $message .= "Username: " . ($user['username'] ? htmlspecialchars("@{$user['username']}") : "<i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>") . "\n";
                $message .= "–ë–∞–ª–∞–Ω—Å: <b>{$user['balance']}</b> –±–∞–ª–ª–æ–≤\n";
                $message .= "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{$user['referrals']}</b>\n";
                $message .= "–ü—Ä–∏–≥–ª–∞—à–µ–Ω (ID): " . ($user['referred_by'] ?: "<i>–Ω–µ—Ç</i>") . "\n";
                $message .= "–†–µ—Ñ. –∫–æ–¥: <code>{$user['ref_code']}</code>\n";
                $message .= "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: " . (!empty($channelId) && isSubscribed($targetUserId) ? '‚úÖ –î–∞' : (empty($channelId) ? '–ù/–î' : '‚ùå –ù–µ—Ç')) . "\n";
                $message .= "–°—Ç–∞—Ç—É—Å: " . ($user['blocked'] ? 'üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω') . "\n";
                $message .= "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: " . $user['joined_at'] . "\n";
                $message .= "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: " . ($user['last_earn'] ? date('Y-m-d H:i:s', $user['last_earn']) : "<i>–Ω–µ –±—ã–ª–æ</i>") . "\n";

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                $invStmt = $db->prepare("SELECT COUNT(*) as count, SUM(amount) as total FROM investments WHERE user_id = :user_id");
                $invStmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
                $invResult = $invStmt->execute()->fetchArray(SQLITE3_ASSOC);
                
                $message .= "\nüìä <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</b>\n";
                $message .= "–í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: <b>{$invResult['count']}</b>\n";
                $message .= "–û–±—â–∞—è —Å—É–º–º–∞: <b>" . ($invResult['total'] ?: 0) . "‚ÇΩ</b>\n";

                editMessage($chatId, $msgId, $message, getUserActionsKeyboard($targetUserId, $user['blocked']));
                answerCallbackQuery($callbackQueryId);
                $callbackAnswered = true;
            } else {
                answerCallbackQuery($callbackQueryId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", true);
                $callbackAnswered = true;
            }
        }
        else if (strpos($data, 'approve_withdraw_') === 0) {
            $targetUserId = (int)str_replace('approve_withdraw_', '', $data);
            $stmt = $db->prepare("SELECT balance, username FROM users WHERE user_id = :user_id");
            $stmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
            $user = $stmt->execute()->fetchArray(SQLITE3_ASSOC);

            if ($user) {
                $amount = $user['balance']; 
                $updateStmt = $db->prepare("UPDATE users SET balance = 0 WHERE user_id = :user_id");
                $updateStmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
                $updateStmt->execute();

                $adminConfirmationMsg = "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –¥–ª—è ID $targetUserId (" . ($user['username'] ? "@".htmlspecialchars($user['username']) : '') . ") –Ω–∞ <b>$amount</b> –±–∞–ª–ª–æ–≤ <b>–û–î–û–ë–†–ï–ù–ê</b>.\n–ë–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω.";
                editMessage($chatId, $msgId, $adminConfirmationMsg); 
                sendMessage($targetUserId, "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>$amount</b> –±–∞–ª–ª–æ–≤ <b>–û–î–û–ë–†–ï–ù–ê</b>!");
                answerCallbackQuery($callbackQueryId);
                $callbackAnswered = true;
            } else {
                editMessage($chatId, $msgId, "‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $targetUserId –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                answerCallbackQuery($callbackQueryId);
                $callbackAnswered = true;
            }
        }
        else if (strpos($data, 'reject_withdraw_') === 0) {
            $targetUserId = (int)str_replace('reject_withdraw_', '', $data);
            $stmt = $db->prepare("SELECT balance, username FROM users WHERE user_id = :user_id");
            $stmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
            $user = $stmt->execute()->fetchArray(SQLITE3_ASSOC);

            if ($user) {
                $amount = $user['balance']; 
                $adminConfirmationMsg = "‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –¥–ª—è ID $targetUserId (" . ($user['username'] ? "@".htmlspecialchars($user['username']) : '') . ") –Ω–∞ <b>$amount</b> –±–∞–ª–ª–æ–≤ <b>–û–¢–ö–õ–û–ù–ï–ù–ê</b>.\n–ë–∞–ª–∞–Ω—Å –ù–ï –∏–∑–º–µ–Ω–µ–Ω.";
                editMessage($chatId, $msgId, $adminConfirmationMsg); 
                sendMessage($targetUserId, "‚ö†Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>$amount</b> –±–∞–ª–ª–æ–≤ <b>–û–¢–ö–õ–û–ù–ï–ù–ê</b>. –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.");
                answerCallbackQuery($callbackQueryId);
                $callbackAnswered = true;
            } else {
                editMessage($chatId, $msgId, "‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $targetUserId –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                answerCallbackQuery($callbackQueryId);
                $callbackAnswered = true;
            }
        }
        else if (strpos($data, 'block_user_') === 0) {
            $targetUserId = (int)str_replace('block_user_', '', $data);
            if ($targetUserId != $adminId) { 
                $stmt = $db->prepare("UPDATE users SET blocked=1 WHERE user_id = :user_id");
                $stmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
                $stmt->execute();
                sendMessage($targetUserId, "üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.");
                answerCallbackQuery($callbackQueryId, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID $targetUserId –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", false);
                $callbackAnswered = true;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                $userStmt = $db->prepare("SELECT * FROM users WHERE user_id = :user_id");
                $userStmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
                $updatedUser = $userStmt->execute()->fetchArray(SQLITE3_ASSOC);
                if ($updatedUser) {
                    $message = "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n";
                    $message .= "ID: <b>{$updatedUser['user_id']}</b>\n";
                    $message .= "Username: " . ($updatedUser['username'] ? htmlspecialchars("@{$updatedUser['username']}") : "<i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>") . "\n";
                    $message .= "–ë–∞–ª–∞–Ω—Å: <b>{$updatedUser['balance']}</b> –±–∞–ª–ª–æ–≤\n";
                    $message .= "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{$updatedUser['referrals']}</b>\n";
                    $message .= "–°—Ç–∞—Ç—É—Å: üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n";
                    
                    editMessage($chatId, $msgId, $message, getUserActionsKeyboard($targetUserId, true));
                }
            } else {
                answerCallbackQuery($callbackQueryId, "‚õî –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.", true);
                $callbackAnswered = true;
            }
        }
        else if (strpos($data, 'unblock_user_') === 0) {
            $targetUserId = (int)str_replace('unblock_user_', '', $data);
            $stmt = $db->prepare("UPDATE users SET blocked=0 WHERE user_id = :user_id");
            $stmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
            $stmt->execute();
            sendMessage($targetUserId, "üéâ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
            answerCallbackQuery($callbackQueryId, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID $targetUserId —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", false);
            $callbackAnswered = true;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            $userStmt = $db->prepare("SELECT * FROM users WHERE user_id = :user_id");
            $userStmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
            $updatedUser = $userStmt->execute()->fetchArray(SQLITE3_ASSOC);
            if ($updatedUser) {
                $message = "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n";
                $message .= "ID: <b>{$updatedUser['user_id']}</b>\n";
                $message .= "Username: " . ($updatedUser['username'] ? htmlspecialchars("@{$updatedUser['username']}") : "<i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>") . "\n";
                $message .= "–ë–∞–ª–∞–Ω—Å: <b>{$updatedUser['balance']}</b> –±–∞–ª–ª–æ–≤\n";
                $message .= "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{$updatedUser['referrals']}</b>\n";
                $message .= "–°—Ç–∞—Ç—É—Å: ‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω</b>\n";
                
                editMessage($chatId, $msgId, $message, getUserActionsKeyboard($targetUserId, false));
            }
        }
    } else if (!$userIsAdmin && 
              (strpos($data, 'admin_') === 0 || 
               strpos($data, 'approve_') === 0 || 
               strpos($data, 'reject_') === 0 || 
               strpos($data, 'block_') === 0 || 
               strpos($data, 'unblock_') === 0)
             ) {
        answerCallbackQuery($callbackQueryId, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", true);
        $callbackAnswered = true;
    }

    // Fallback –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    if (!$callbackAnswered) {
        bot_log("Unhandled callback_data: $data by user $userId", "WARNING");
        answerCallbackQuery($callbackQueryId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.", true);
    }
}

// -----------------------------
// üöÄ Main Webhook Logic
// -----------------------------
$update = json_decode($content, true);

if (!$update) {
    bot_log("Invalid JSON received: " . $content, "ERROR");
    http_response_code(400); // Bad Request
    echo "Invalid JSON.";
    exit;
}

try {
    $message_thread_id = $update['message']['message_thread_id'] ?? ($update['callback_query']['message']['message_thread_id'] ?? null);

    if (isset($update['callback_query'])) {
        $userId = $update['callback_query']['from']['id'];
        $username = $update['callback_query']['from']['username'] ?? null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        $stmt = $db->prepare("SELECT 1 FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        if (!$stmt->execute()->fetchArray(SQLITE3_ASSOC)) {
            $refCode = substr(bin2hex(random_bytes(4)), 0, 8); 
            $insertStmt = $db->prepare("INSERT OR IGNORE INTO users (user_id, username, ref_code) VALUES (:user_id, :username, :ref_code)");
            $insertStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
            $insertStmt->bindValue(':username', $username ? substr($username, 0, 255) : null, SQLITE3_TEXT);
            $insertStmt->bindValue(':ref_code', $refCode, SQLITE3_TEXT);
            if (!$insertStmt->execute()) {
                bot_log("Failed to insert user $userId ($username) on callback. DB Error: " . $db->lastErrorMsg(), "ERROR");
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å
        handleCallback($update['callback_query']);

    } elseif (isset($update['message'])) {
        $message = $update['message'];
        $chatId = $message['chat']['id'] ?? null;
        $userId = $message['from']['id'] ?? null; 

        if (!$chatId || !$userId) {
            bot_log("No chat_id or user_id in message: " . json_encode($message), "WARNING");
            echo "OK"; // Acknowledge Telegram
            exit;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        $stmt = $db->prepare("SELECT 1 FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        if (!$stmt->execute()->fetchArray(SQLITE3_ASSOC)) {
            $username = $message['from']['username'] ?? null;
            $refCode = substr(bin2hex(random_bytes(4)), 0, 8); 

            $insertStmt = $db->prepare("INSERT INTO users (user_id, username, ref_code) VALUES (:user_id, :username, :ref_code)");
            $insertStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
            $insertStmt->bindValue(':username', $username ? substr($username, 0, 255) : null, SQLITE3_TEXT);
            $insertStmt->bindValue(':ref_code', $refCode, SQLITE3_TEXT);
            if(!$insertStmt->execute()) {
                bot_log("Failed to insert new user $userId ($username). DB Error: " . $db->lastErrorMsg(), "ERROR");
            } else {
                bot_log("New user $userId ($username) initialized with ref_code $refCode.", "INFO");
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        $userBlockedStmt = $db->prepare("SELECT blocked FROM users WHERE user_id = :user_id");
        $userBlockedStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $userStatus = $userBlockedStmt->execute()->fetchArray(SQLITE3_ASSOC);

        if ($userId != $adminId && isset($userStatus['blocked']) && $userStatus['blocked'] == 1) {
            sendMessage($chatId, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.", null, $message_thread_id);
            echo "OK";
            exit;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        $text = trim($message['text'] ?? '');
        if (strpos($text, '/start') === 0) {
            handleStart($chatId, $userId, $text);
        } else {
            $userIsAdmin = ($userId == $adminId);
            $is_subscribed = empty($channelId) || isSubscribed($userId) || $userIsAdmin;

            if ($is_subscribed) {
                sendMessage($chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é. –ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ –≤–∏–¥–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.", getMainMenuInlineKeyboard($userIsAdmin), $message_thread_id);
            } else {
                $subKeyboard = getSubscriptionKeyboard();
                $subMessage = "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b> –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.";
                if ($subKeyboard) {
                    sendMessage($chatId, $subMessage, $subKeyboard, $message_thread_id);
                } else {
                    sendMessage($chatId, $subMessage . "\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", null, $message_thread_id);
                }
            }
        }
    }
} catch (Throwable $e) {
    bot_log("!!! Uncaught Throwable: ".$e->getMessage()." in ".$e->getFile().":".$e->getLine()."\nStack trace:\n".$e->getTraceAsString(), "FATAL");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    if (!empty($adminId)) {
        sendMessage($adminId, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: ".$e->getMessage());
    }
}

// –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º OK –¥–ª—è Telegram
http_response_code(200);
echo "OK"; 
?>
