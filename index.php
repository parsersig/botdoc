<?php

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
$botUsername = 'your_bot_username'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ –∏–º—è –±–æ—Ç–∞ –±–µ–∑ @
define('TELEGRAM_BOT_TOKEN', getenv('TELEGRAM_BOT_TOKEN') ?: 'YOUR_BOT_TOKEN_HERE');
define('ADMIN_ID', getenv('ADMIN_ID') ?: 0);
define('CHANNEL_ID', getenv('CHANNEL_ID') ?: ''); // –ú–æ–∂–µ—Ç –±—ã—Ç—å '@username' –∏–ª–∏ '-100123456789'
define('DB_PATH', __DIR__ . '/tmp/bot_database.db');
define('ERROR_LOG_PATH', __DIR__ . '/tmp/bot_errors.log');

$apiUrl = "https://api.telegram.org/bot " . TELEGRAM_BOT_TOKEN;
$errorLogPath = ERROR_LOG_PATH;

// === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
function bot_log($message, $level = "INFO") {
    $logEntry = "[" . date("Y-m-d H:i:s") . "] [$level] $message\n";
    file_put_contents(ERROR_LOG_PATH, $logEntry, FILE_APPEND);
}

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
$db = new SQLite3(DB_PATH);
if (!$db) {
    bot_log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", "FATAL");
    exit("Database error");
}
$stmt = $db->exec("CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    balance INTEGER DEFAULT 0,
    referrals INTEGER DEFAULT 0,
    ref_code TEXT UNIQUE,
    joined_at INTEGER,
    last_earn INTEGER,
    blocked INTEGER DEFAULT 0
)");
if (!$stmt) {
    bot_log("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: " . $db->lastErrorMsg(), "FATAL");
}

// === –§—É–Ω–∫—Ü–∏—è API Telegram ===
function apiRequest($method, $params = [], $retries = 3) {
    global $apiUrl, $errorLogPath;
    $url = "$apiUrl/$method";
    $options = [
        'http' => [
            'header' => "Content-type: application/json\r\n",
            'method' => 'POST',
            'content' => json_encode($params),
            'timeout' => 10,
        ],
    ];
    $context = stream_context_create($options);
    for ($i = 0; $i < $retries; $i++) {
        $response = @file_get_contents($url, false, $context);
        if ($response !== false) {
            return json_decode($response, true);
        }
        usleep(500000); // 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    }
    bot_log("API Request failed after $retries attempts to $url", "WARNING");
    return ['ok' => false, 'error_code' => 500, 'description' => 'Internal Server Error'];
}

function sendMessage($chatId, $text, $replyMarkup = null, $threadId = null) {
    $params = [
        'chat_id' => $chatId,
        'text' => $text,
        'parse_mode' => 'HTML',
        'disable_web_page_preview' => true,
    ];
    if ($replyMarkup) $params['reply_markup'] = json_encode($replyMarkup);
    if ($threadId) $params['message_thread_id'] = $threadId;
    return apiRequest('sendMessage', $params);
}

function editMessage($chatId, $msgId, $text, $replyMarkup = null) {
    $params = [
        'chat_id' => $chatId,
        'message_id' => $msgId,
        'text' => $text,
        'parse_mode' => 'HTML',
    ];
    if ($replyMarkup) $params['reply_markup'] = json_encode($replyMarkup);
    return apiRequest('editMessageText', $params);
}

function answerCallbackQuery($callbackQueryId, $text = null, $showAlert = false) {
    $params = [
        'callback_query_id' => $callbackQueryId,
        'text' => $text,
        'show_alert' => $showAlert,
    ];
    return apiRequest('answerCallbackQuery', $params);
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
function isSubscribed($userId) {
    global $db, $channelId;
    if (empty($channelId)) return true;
    $result = apiRequest('getChatMember', [
        'chat_id' => $channelId,
        'user_id' => $userId
    ]);
    return isset($result['result']) && in_array($result['result']['status'], ['member', 'administrator', 'creator']);
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ===
function getSubscriptionKeyboard() {
    global $channelId;
    if (empty($channelId)) return null;
    $channelUrl = '';
    if (strpos((string)$channelId, "-100") === 0) {
        $channelIdForLink = substr((string)$channelId, 4);
        $channelUrl = 'https://t.me/c/ ' . $channelIdForLink;
    } elseif ($channelId[0] === '@') {
        $channelUrl = 'https://t.me/ ' . ltrim($channelId, '@');
    } else {
        $channelUrl = 'https://t.me/ ' . $channelId;
    }

    return [
        'inline_keyboard' => [
            [['text' => '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', 'url' => $channelUrl]],
            [['text' => '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'callback_data' => 'check_subscription']]
        ]
    ];
}

function getMainMenuInlineKeyboard($isAdmin) {
    $keyboard = [
        'inline_keyboard' => [
            [['text' => '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', 'callback_data' => 'earn_money']],
            [['text' => '–†–µ—Ñ–µ—Ä–∞–ª—ã', 'callback_data' => 'show_referrals_info']],
            [['text' => '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data' => 'show_stats']],
        ]
    ];
    if ($isAdmin) {
        $keyboard['inline_keyboard'][] = [['text' => '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'callback_data' => 'admin_panel_show']];
    }
    return $keyboard;
}

function getAdminPanelKeyboard() {
    return [
        'inline_keyboard' => [
            [['text' => 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data' => 'admin_stats_show']],
            [['text' => 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'callback_data' => 'admin_users_list']],
            [['text' => 'üîô –ù–∞–∑–∞–¥', 'callback_data' => 'main_menu_show']],
        ]
    ];
}

function getUserActionsKeyboard($targetUserId, $isBlocked = false) {
    return [
        'inline_keyboard' => [
            [['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'main_menu_show']]
        ]
    ];
}

function getBackToAdminPanelKeyboard() {
    return [
        'inline_keyboard' => [
            [['text' => 'üîô –ù–∞–∑–∞–¥', 'callback_data' => 'admin_panel_show']]
        ]
    ];
}

function getBotStatsText() {
    global $db;
    $totalUsers = $db->querySingle("SELECT COUNT(*) FROM users");
    $activeUsers = $db->querySingle("SELECT COUNT(*) FROM users WHERE blocked = 0");
    $blockedUsers = $db->querySingle("SELECT COUNT(*) FROM users WHERE blocked = 1");
    $totalBalance = $db->querySingle("SELECT SUM(balance) FROM users");

    return "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n".
        "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>$totalUsers</b>\n".
        "–ê–∫—Ç–∏–≤–Ω—ã–µ: <b>$activeUsers</b>, –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: <b>$blockedUsers</b>\n".
        "–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>$totalBalance</b>";
}

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
function handleStart($chatId, $userId, $text) {
    global $db, $botUsername, $adminId, $channelId;

    $refCode = '';
    if (strpos($text, ' ') !== false) {
        $parts = explode(' ', $text, 2);
        $refCode = trim($parts[1]);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    $stmt = $db->prepare("SELECT 1 FROM users WHERE user_id = :user_id");
    $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
    if (!$stmt->execute()->fetchArray(SQLITE3_ASSOC)) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $refCodeNew = substr(bin2hex(random_bytes(4)), 0, 8);
        $stmt = $db->prepare("INSERT INTO users (user_id, username, ref_code, joined_at) VALUES (:user_id, :username, :ref_code, :joined_at)");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $stmt->bindValue(':username', null, SQLITE3_NULL);
        $stmt->bindValue(':ref_code', $refCodeNew, SQLITE3_TEXT);
        $stmt->bindValue(':joined_at', time(), SQLITE3_INTEGER);
        $stmt->execute();

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
        if (!empty($refCode)) {
            $stmt = $db->prepare("SELECT user_id FROM users WHERE ref_code = :ref_code LIMIT 1");
            $stmt->bindValue(':ref_code', $refCode, SQLITE3_TEXT);
            $referrer = $stmt->execute()->fetchArray(SQLITE3_ASSOC);
            if ($referrer) {
                $stmt = $db->prepare("UPDATE users SET referrals = referrals + 1 WHERE user_id = :user_id");
                $stmt->bindValue(':user_id', $referrer['user_id'], SQLITE3_INTEGER);
                $stmt->execute();
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if (!empty($channelId) && !isSubscribed($userId) && $userId != $adminId) {
        $message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ @$botUsername!\n";
        $message .= "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b>. –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n";
        $message .= "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.";

        $subKeyboard = getSubscriptionKeyboard();
        if ($subKeyboard) {
            sendMessage($chatId, $message, $subKeyboard);
        } else {
            sendMessage($chatId, $message . "\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
        }
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        $userStmt = $db->prepare("SELECT ref_code FROM users WHERE user_id = :user_id");
        $userStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $user = $userStmt->execute()->fetchArray(SQLITE3_ASSOC);
        $refLink = "https://t.me/ $botUsername?start=" . ($user['ref_code'] ?? '');

        $message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ @$botUsername!\n";
        $message .= "üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –∏ –≤—ã–≤–æ–¥–∏—Ç–µ –∏—Ö.\n";
        $message .= "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: <code>$refLink</code>\n";
        $message .= "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.";

        sendMessage($chatId, $message, getMainMenuInlineKeyboard($userId == $adminId));
    }
}

function handleCallback($callbackQuery) {
    global $db, $adminId, $botUsername, $channelId;
    $callbackQueryId = $callbackQuery['id'];
    $chatId = $callbackQuery['message']['chat']['id'];
    $msgId = $callbackQuery['message']['message_id'];
    $userId = $callbackQuery['from']['id'];
    $data = $callbackQuery['data'];
    $userIsAdmin = ($userId == $adminId);
    $callbackAnswered = false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if ($data === 'check_subscription') {
        if (!empty($channelId) && isSubscribed($userId)) {
            $userStmt = $db->prepare("SELECT ref_code FROM users WHERE user_id = :user_id");
            $userStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
            $user = $userStmt->execute()->fetchArray(SQLITE3_ASSOC);
            $refLink = "https://t.me/ $botUsername?start=" . ($user['ref_code'] ?? '');

            $message = "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!</b>\n";
            $message .= "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.\n";
            $message .= "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:\n<code>$refLink</code>\n";
            $message .= "üëá –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:";

            editMessage($chatId, $msgId, $message, getMainMenuInlineKeyboard($userIsAdmin));
            $callbackAnswered = true;
        } else if (empty($channelId)) {
            $message = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.";
            $message .= "üëá –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:";
            editMessage($chatId, $msgId, $message, getMainMenuInlineKeyboard($userIsAdmin));
            $callbackAnswered = true;
        } else {
            answerCallbackQuery($callbackQueryId, "‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.", true);
            $callbackAnswered = true;
        }
    }

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if ($data === 'main_menu_show') {
        $userStmt = $db->prepare("SELECT ref_code FROM users WHERE user_id = :user_id");
        $userStmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $user = $userStmt->execute()->fetchArray(SQLITE3_ASSOC);
        $refLink = "https://t.me/ $botUsername?start=" . ($user['ref_code'] ?? '');

        $message = "üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> @$botUsername!";
        $message .= "üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –∏ –≤—ã–≤–æ–¥–∏—Ç–µ –∏—Ö.";
        $message .= "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: <code>$refLink</code>";
        $message .= "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:";

        editMessage($chatId, $msgId, $message, getMainMenuInlineKeyboard($userIsAdmin));
        $callbackAnswered = true;
    }

    // –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å
    if ($data === 'earn_money') {
        $cooldown = 60;
        $stmt = $db->prepare("SELECT last_earn, balance FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $row = $stmt->execute()->fetchArray(SQLITE3_ASSOC);
        $remaining = $cooldown - (time() - ($row['last_earn'] ?? 0));

        if ($remaining <= 0) {
            $newBalance = ($row['balance'] ?? 0) + 1;
            $stmt = $db->prepare("UPDATE users SET balance = :balance, last_earn = :last_earn WHERE user_id = :user_id");
            $stmt->bindValue(':balance', $newBalance, SQLITE3_INTEGER);
            $stmt->bindValue(':last_earn', time(), SQLITE3_INTEGER);
            $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
            $stmt->execute();

            $message = "üéâ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –±–∞–ª–ª!\n";
            $message .= "–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>$newBalance</b>";

            editMessage($chatId, $msgId, $message, getMainMenuInlineKeyboard($userIsAdmin));
        } else {
            $message = "‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ $remaining —Å–µ–∫—É–Ω–¥.";
            editMessage($chatId, $msgId, $message, getMainMenuInlineKeyboard($userIsAdmin));
        }
        $callbackAnswered = true;
    }

    // –†–µ—Ñ–µ—Ä–∞–ª—ã
    if ($data === 'show_referrals_info') {
        $stmt = $db->prepare("SELECT ref_code, referrals FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $user = $stmt->execute()->fetchArray(SQLITE3_ASSOC);
        $refLink = "https://t.me/ $botUsername?start=" . ($user['ref_code'] ?? '');

        $msg = "üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>";
        $msg .= "–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: <code>" . ($user['ref_code'] ?? 'N/A') . "</code>";
        $msg .= "–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: <b>{$user['referrals']}</b> —á–µ–ª–æ–≤–µ–∫";

        editMessage($chatId, $msgId, $msg, getMainMenuInlineKeyboard($userIsAdmin));
        $callbackAnswered = true;
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if ($data === 'show_stats') {
        $stmt = $db->prepare("SELECT balance, referrals FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        $user = $stmt->execute()->fetchArray(SQLITE3_ASSOC);

        $message = "üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>";
        $message .= "–ë–∞–ª–∞–Ω—Å: <b>{$user['balance']}</b>";
        $message .= "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{$user['referrals']}</b>";

        editMessage($chatId, $msgId, $message, getMainMenuInlineKeyboard($userIsAdmin));
        $callbackAnswered = true;
    }

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if ($data === 'admin_panel_show' && $userIsAdmin) {
        editMessage($chatId, $msgId, "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", getAdminPanelKeyboard());
        $callbackAnswered = true;
    }

    if ($data === 'admin_stats_show' && $userIsAdmin) {
        editMessage($chatId, $msgId, getBotStatsText(), getBackToAdminPanelKeyboard());
        $callbackAnswered = true;
    }

    if ($data === 'admin_users_list' && $userIsAdmin) {
        $result = $db->query("SELECT user_id, username, balance, blocked FROM users ORDER BY joined_at DESC LIMIT 20");
        $usersKeyboard = ['inline_keyboard' => []];
        $userListText = "üë• <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)</b>:";

        if ($result) {
            while ($user = $result->fetchArray(SQLITE3_ASSOC)) {
                $usersKeyboard['inline_keyboard'][] = [
                    ['text' => "üë§ {$user['user_id']}", 'callback_data' => 'admin_user_details_' . $user['user_id']]
                ];
            }
            $usersKeyboard['inline_keyboard'][] = [['text' => 'üîô –ù–∞–∑–∞–¥', 'callback_data' => 'admin_panel_show']];
        }

        editMessage($chatId, $msgId, $userListText, $usersKeyboard);
        $callbackAnswered = true;
    }

    if (strpos($data, 'admin_user_details_') === 0 && $userIsAdmin) {
        $targetUserId = (int)str_replace('admin_user_details_', '', $data);
        $stmt = $db->prepare("SELECT * FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
        $user = $stmt->execute()->fetchArray(SQLITE3_ASSOC);

        if ($user) {
            $message = "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>";
            $message .= "ID: <b>{$user['user_id']}</b>";
            $message .= "Username: " . ($user['username'] ? htmlspecialchars("@{$user['username']}") : "<i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>") . "";
            $message .= "–ë–∞–ª–∞–Ω—Å: <b>{$user['balance']}</b> –±–∞–ª–ª–æ–≤";
            $message .= "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{$user['referrals']}</b>";
            $message .= "–°—Ç–∞—Ç—É—Å: " . ($user['blocked'] ? 'üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω') . "";

            $actionsKeyboard = getUserActionsKeyboard($targetUserId, $user['blocked']);
            editMessage($chatId, $msgId, $message, $actionsKeyboard);
        } else {
            answerCallbackQuery($callbackQueryId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", true);
        }
        $callbackAnswered = true;
    }

    if (strpos($data, 'block_user_') === 0 && $userIsAdmin) {
        $targetUserId = (int)str_replace('block_user_', '', $data);
        if ($targetUserId != $adminId) {
            $stmt = $db->prepare("UPDATE users SET blocked=1 WHERE user_id = :user_id");
            $stmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
            $stmt->execute();
            sendMessage($targetUserId, "üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.");

            $stmt = $db->prepare("SELECT * FROM users WHERE user_id = :user_id");
            $stmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
            $updatedUser = $stmt->execute()->fetchArray(SQLITE3_ASSOC);

            $message = "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>";
            $message .= "ID: <b>{$updatedUser['user_id']}</b>";
            $message .= "Username: " . ($updatedUser['username'] ? htmlspecialchars("@{$updatedUser['username']}") : "<i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>") . "";
            $message .= "–ë–∞–ª–∞–Ω—Å: <b>{$updatedUser['balance']}</b> –±–∞–ª–ª–æ–≤";
            $message .= "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{$updatedUser['referrals']}</b>";
            $message .= "–°—Ç–∞—Ç—É—Å: üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>";

            editMessage($chatId, $msgId, $message, getUserActionsKeyboard($targetUserId, true));
        } else {
            answerCallbackQuery($callbackQueryId, "‚õî –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.", true);
        }
        $callbackAnswered = true;
    }

    if (strpos($data, 'unblock_user_') === 0 && $userIsAdmin) {
        $targetUserId = (int)str_replace('unblock_user_', '', $data);
        $stmt = $db->prepare("UPDATE users SET blocked=0 WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
        $stmt->execute();
        sendMessage($targetUserId, "üéâ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");

        $stmt = $db->prepare("SELECT * FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $targetUserId, SQLITE3_INTEGER);
        $updatedUser = $stmt->execute()->fetchArray(SQLITE3_ASSOC);

        $message = "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>";
        $message .= "ID: <b>{$updatedUser['user_id']}</b>";
        $message .= "Username: " . ($updatedUser['username'] ? htmlspecialchars("@{$updatedUser['username']}") : "<i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>") . "";
        $message .= "–ë–∞–ª–∞–Ω—Å: <b>{$updatedUser['balance']}</b> –±–∞–ª–ª–æ–≤";
        $message .= "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{$updatedUser['referrals']}</b>";
        $message .= "–°—Ç–∞—Ç—É—Å: ‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω</b>";

        editMessage($chatId, $msgId, $message, getUserActionsKeyboard($targetUserId, false));
        $callbackAnswered = true;
    }

    // Fallback –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    if (!$callbackAnswered) {
        bot_log("Unhandled callback_data: $data by user $userId", "WARNING");
        answerCallbackQuery($callbackQueryId, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", true);
    }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ===
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    if (!(isset($_SERVER['REQUEST_URI']) && $_SERVER['REQUEST_URI'] === '/health') &&
        !(isset($_GET['setwebhook']) && $_GET['setwebhook'] === '1') &&
        !(isset($_GET['deletewebhook']) && $_GET['deletewebhook'] === '1') &&
        !(isset($_GET['webhook_info']) && $_GET['webhook_info'] === '1') &&
        !(isset($_GET['logs']) && $_GET['logs'] === '1')) {
        http_response_code(405);
        echo "Method Not Allowed. This endpoint expects POST requests from Telegram.";
        exit;
    }
}

$content = file_get_contents("php://input");
if (empty($content)) {
    http_response_code(200);
    echo "Empty request body.";
    exit;
}

// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
bot_log("Received update: " . $content, "INFO");

$update = json_decode($content, true);

try {
    if (isset($update['callback_query'])) {
        handleCallback($update['callback_query']);
    } elseif (isset($update['message'])) {
        $message = $update['message'];
        $chatId = $message['chat']['id'] ?? null;
        $userId = $message['from']['id'] ?? null;
        $messageThreadId = $message['message_thread_id'] ?? null;

        if (!$chatId || !$userId) {
            bot_log("No chat_id or user_id in message: " . json_encode($message), "WARNING");
            echo "OK";
            exit;
        }

        $stmt = $db->prepare("SELECT 1 FROM users WHERE user_id = :user_id");
        $stmt->bindValue(':user_id', $userId, SQLITE3_INTEGER);
        if (!$stmt->execute()->fetchArray(SQLITE3_ASSOC)) {
            handleStart($chatId, $userId, '/start');
        } else {
            $userIsAdmin = ($userId == ADMIN_ID);
            $isSubscribed = empty(CHANNEL_ID) || isSubscribed($userId);

            if ($isSubscribed || $userIsAdmin) {
                sendMessage($chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é. –ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ –≤–∏–¥–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.", getMainMenuInlineKeyboard($userIsAdmin), $messageThreadId);
            } else {
                $subKeyboard = getSubscriptionKeyboard();
                $subMessage = "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.";
                if ($subKeyboard) {
                    sendMessage($chatId, $subMessage, $subKeyboard, $messageThreadId);
                } else {
                    sendMessage($chatId, $subMessage . "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", null, $messageThreadId);
                }
            }
        }
    }
} catch (Throwable $e) {
    bot_log("!!! Uncaught Throwable: " . $e->getMessage() . " in " . $e->getFile() . ":" . $e->getLine() . "Stack trace:" . $e->getTraceAsString(), "FATAL");
    if (!empty(ADMIN_ID)) {
        sendMessage(ADMIN_ID, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: " . $e->getMessage());
    }
}

// === –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ===
if (isset($_GET['setwebhook']) && $_GET['setwebhook'] === '1') {
    $url = "https://" . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
    $url = str_replace('?setwebhook=1', '', $url);

    $deleteResult = apiRequest('deleteWebhook', ['drop_pending_updates' => true]);
    $setResult = apiRequest('setWebhook', [
        'url' => $url,
        'max_connections' => 40,
        'allowed_updates' => json_encode(['message', 'callback_query'])
    ]);

    echo "<pre>DELETE Webhook result: " . json_encode($deleteResult, JSON_PRETTY_PRINT) . "</pre>";
    echo "<pre>SET Webhook result: " . json_encode($setResult, JSON_PRETTY_PRINT) . "</pre>";
    exit;
}

if (isset($_GET['deletewebhook']) && $_GET['deletewebhook'] === '1') {
    $result = apiRequest('deleteWebhook', ['drop_pending_updates' => true]);
    echo "<pre>Delete Webhook result: " . json_encode($result, JSON_PRETTY_PRINT) . "</pre>";
    exit;
}

if (isset($_GET['webhook_info']) && $_GET['webhook_info'] === '1') {
    $result = apiRequest('getWebhookInfo');
    echo "<pre>Webhook Info: " . json_encode($result, JSON_PRETTY_PRINT) . "</pre>";
    exit;
}

if (isset($_GET['logs']) && $_GET['logs'] === '1') {
    if (file_exists(ERROR_LOG_PATH)) {
        $logs = file_get_contents(ERROR_LOG_PATH);
        echo "<pre>" . htmlspecialchars($logs) . "</pre>";
    } else {
        echo "Log file not found at: " . ERROR_LOG_PATH;
    }
    exit;
}

// === –û—Ç–≤–µ—Ç Telegram ===
http_response_code(200);
echo "OK";
